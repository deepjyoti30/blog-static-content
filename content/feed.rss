<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>Blog | Deepjyoti Barman</title>
    <link>https://blog.deepjyoti30.dev/feed</link>
    <description>Just sharing my thoughts</description>
    <atom:link href="https://blog.deepjyoti30.dev/feed" rel="self"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <image>
      <url>https://blog.deepjyoti30.dev/img/logo.png</url>
      <title>Blog | Deepjyoti Barman</title>
      <link>https://blog.deepjyoti30.dev/feed</link>
    </image>
    <language>en</language>
    <lastBuildDate>Fri, 14 May 2021 09:57:36 +0000</lastBuildDate>
    <item>
      <title>Easily Test Mixins With Jest</title>
      <link>https://blog.deepjyoti30.dev/mixins-test-jest</link>
      <description>&lt;p&gt;So recently I decided to add tests to one of my &lt;a href="https://github.com/deepjyoti30/ytmdl-web-v2"&gt;repos&lt;/a&gt;. Since I am new to JS to some extent, I started looking for what the best ways were to add tests to a frontend project. Well, as it turns out there are many libraries (duhh, it's JS afterall). However, there are various types of testing as well like &lt;strong&gt;Unit Testing&lt;/strong&gt; or &lt;strong&gt;Component Testing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This post is not about those tests though. After looking a bit for the best library to use with VueJS, I decided on using &lt;a href="https://jestjs.io/"&gt;jest&lt;/a&gt;. I am not an expert but it doesn't take an expert to know that Jest was built for &lt;strong&gt;ReactJS&lt;/strong&gt;. Well, for starter, Jest is built by Facebook and &lt;code&gt;has a great integration with React. js&lt;/code&gt;. So yeah, Jest might not be the first choice of Vue users.&lt;/p&gt;

&lt;p&gt;I loved the fact that it was so easy to setup and as I started writing tests I understood that it's actually very easy to use as well. So all in all, I ended up using Jest as the testing framework for my project.&lt;/p&gt;

&lt;h2 id="testing-mixins"&gt;Testing Mixins&lt;/h2&gt;

&lt;p&gt;After I had written tests for most of my components, I finally decided to write tests for my mixins. This is when I came to a stop. I started looking at the docs in order to know what the best way to test mixins would be. However, there wasn't much documentation regarding that.&lt;/p&gt;

&lt;p&gt;This is when I realized something.&lt;/p&gt;

&lt;h3 id="what-are-mixins"&gt;What are mixins?&lt;/h3&gt;

&lt;p&gt;As &lt;a href="https://en.wikipedia.org/wiki/Mixin"&gt;stated on Wikipedia&lt;/a&gt;, &lt;em&gt;a mixin is a class containing methods that can be used by other classes without a need to inherit from it&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In case you are not familiar to mixins (why are you even reading this article about writing tests for mixins then?), mixins are functions that developers can &lt;em&gt;inherit&lt;/em&gt; in some other code and use them.&lt;/p&gt;

&lt;p&gt;This also means that &lt;strong&gt;mixins cannot be used independently&lt;/strong&gt;. What I mean is, let's say you have a mixin defined in VueJS. Now you want to use this mixin. You can easily import it and use. However, in your source code is there any use of the mixin without it getting imported? No.&lt;/p&gt;

&lt;h2 id="mock-component"&gt;Mock Component&lt;/h2&gt;

&lt;p&gt;Now that our doubt about mixins is out of the way. It is clear, we will &lt;strong&gt;need&lt;/strong&gt; a component that can import the Mixin in order to test it. So what should we do?&lt;/p&gt;

&lt;p&gt;We can just make a simple Mock Component. In my case, I went with a simple Mock Component written in Vue in the following way:&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kr"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/template&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * Return a component to be used as dummy in order&lt;/span&gt;
&lt;span class="cm"&gt; * to mock things like mixins.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;MockComponent&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once we have a component, we can easily use it to use our mixins and use it accordingly.&lt;/p&gt;

&lt;h2 id="using-mock-component-with-mixin"&gt;Using mock component with Mixin&lt;/h2&gt;

&lt;p&gt;Let's say we have a mixin with a function &lt;code&gt;getBoolFromValue()&lt;/code&gt;, we can easily write a jest test for that now:&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Test mixin function&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;shallowMount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MockComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mixinName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;should return proper value from bool&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getBoolFromValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;on&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeTruthy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="why-not-use-a-component-from-the-code"&gt;Why not use a component from the code?&lt;/h2&gt;

&lt;p&gt;Well, using a component already defined in the code would work too. However, why add all the bulk while testing a mixin. We want the mixin to be tested as easily as possible. As well, adding a component might add some bulky imports etc, so it is way easier to just keep a &lt;code&gt;MockComponent&lt;/code&gt; that is just basically an empty template to test Mixins.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/deepjyoti30/ytmdl-web-v2/blob/master/tests/__tests__/mixins.settings.test.js"&gt;You can check the tests on my repo as well&lt;/a&gt;&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/mixins-test-jest</guid>
      <category>javascript</category>
      <category>mixin</category>
      <category>test</category>
      <category>vue</category>
      <pubDate>Fri, 14 May 2021 15:27:36 +0000</pubDate>
    </item>
    <item>
      <title>Deploy Celery &amp; RabbitMQ with Compose</title>
      <link>https://blog.deepjyoti30.dev/celery_compose</link>
      <description>&lt;p&gt;Off late, I had been working a lot with FastAPI. Recently, however I had a requirement. I needed to run tasks in the background after the request was made. So something like, when the request is recieved, add it to the task list and return a response. The task will be done in the background.&lt;/p&gt;

&lt;p&gt;I somewhat knew about &lt;a href="https://docs.celeryproject.org/"&gt;Celery&lt;/a&gt;, however never had the need to work with it. So I finally decided to use Celery and boy oh boy, was I surprised.&lt;/p&gt;

&lt;h2&gt;What is Celery&lt;/h2&gt;

&lt;p&gt;So, Celery is a task scheduler. What I described above in the first paragraph, Celery does exactly that! We pass it a task and it runs that in the background.&lt;/p&gt;

&lt;p&gt;It basically runs the task as a synchornous function which effectively makes the function run in the background. &lt;a href="https://docs.celeryproject.org/en/stable/getting-started/introduction.html"&gt;You can read more about it here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, in order for Celery to run properly, it needs a &lt;strong&gt;broker&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;What is a broker?&lt;/h3&gt;

&lt;p&gt;A broker will keep a list of all the tasks that are to be executed and will accordingly supply Celery with the tasks. Celery will then use the task and work on it.&lt;/p&gt;

&lt;p&gt;Directly from Google:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A broker is a person or firm who arranges transactions between a buyer and a seller for a commission when the deal is executed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This pretty much sums it up. In our case, we are the &lt;strong&gt;seller&lt;/strong&gt;, celery is the &lt;strong&gt;buyer&lt;/strong&gt; and we will use a &lt;strong&gt;broker&lt;/strong&gt; in between in order to handle all the tasks. Brokers are also called as message queues or task queues.&lt;/p&gt;

&lt;p&gt;Some of the brokers that Celery works with are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;RabbitMQ&lt;/h3&gt;

&lt;p&gt;In this article, I will primarily use &lt;strong&gt;RabbitMQ&lt;/strong&gt; as the broker. You can read on how to &lt;a href="https://docs.celeryproject.org/en/stable/getting-started/brokers/redis.html"&gt;use Redis with Celery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Easiest way to setup RabbitMQ is to use a docker file. Using the following command, a container with RabbitMQ can be deployed within seconds.&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;docker run -d --rm -it --hostname my-rabbit -p 15672:15672 -p 5672:5672 rabbitmq:3-management&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the above command, the &lt;code&gt;management&lt;/code&gt; image is used. You can check &lt;a href="https://hub.docker.com/_/rabbitmq"&gt;other available images here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Breaking down the above command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We are mapping the &lt;code&gt;15672&lt;/code&gt; port of the container to our host&lt;/li&gt;
&lt;li&gt;We are mapping the &lt;code&gt;5672&lt;/code&gt; port of the container to our host.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is because the &lt;code&gt;15672&lt;/code&gt; port serves the GUI for rabbitmq and &lt;code&gt;5672&lt;/code&gt; is how &lt;strong&gt;Celery&lt;/strong&gt; will communicate with it.&lt;/p&gt;

&lt;h2&gt;Worker&lt;/h2&gt;

&lt;p&gt;Now that we have our broker in place, let's use a Dockerfile to deploy &lt;strong&gt;Celery&lt;/strong&gt;. Celery, since it does tasks in the background, is referred to as &lt;strong&gt;worker&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We will build the &lt;code&gt;worker&lt;/code&gt; with the following Dockerfile:&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="s"&gt;python:3.6&lt;/span&gt;

&lt;span class="c"&gt;# copy contents of project into docker&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; ./ /app/

&lt;span class="c"&gt;# We will use internal functions of the API&lt;/span&gt;
&lt;span class="c"&gt;# So install all dependencies of the API&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; app &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; pip install -r requirements.txt

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt; celery -A worker worker --loglevel&lt;span class="o"&gt;=&lt;/span&gt;INFO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using the above Dockerfile, we can deploy the worker.&lt;/p&gt;

&lt;h2&gt;Using a compose file&lt;/h2&gt;

&lt;p&gt;Now that we have two of the services ready, we are ready to write our &lt;strong&gt;docker compose&lt;/strong&gt; file. &lt;a href="https://docs.docker.com/compose/gettingstarted/"&gt;Read more about docker compose here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Usually, the worker is run along with an API and the API makes calls to the worker in order to run the worker tasks in the background.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our case, we will be creating two containers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RabbitMQ container&lt;/li&gt;
&lt;li&gt;Worker container&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We want our worker to access the rabbitMQ container through the network and accordingly use it as a broker.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Most of the time, you'll probably also need an API container that will also interact with the worker using the network.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Following is the compose file:&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3.7&amp;quot;&lt;/span&gt;

&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# Deploy the broker.&lt;/span&gt;
  &lt;span class="nt"&gt;rabbitmq_server&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rabbitmq:3-management&lt;/span&gt;
    &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Expose the port for the worker to add/get tasks&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;5672:5672&lt;/span&gt;
      &lt;span class="c1"&gt;# OPTIONAL: Expose the GUI port&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;15672:15672&lt;/span&gt;

  &lt;span class="c1"&gt;# Deploy the worker&lt;/span&gt;
  &lt;span class="nt"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Build using the worker Dockerfile&lt;/span&gt;
    &lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;.&lt;/span&gt;
      &lt;span class="nt"&gt;dockerfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;worker.Dockerfile&lt;/span&gt;
    &lt;span class="c1"&gt;# Need to access the database&lt;/span&gt;
    &lt;span class="c1"&gt;# OPTIONAL: If you worker needs to access your db that is deployed&lt;/span&gt;
    &lt;span class="c1"&gt;# locally, then make the network mode as host.&lt;/span&gt;
    &lt;span class="nt"&gt;network_mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;host&lt;/span&gt;
    &lt;span class="c1"&gt;# Pass the rabbitmq_uri as env varible in order to&lt;/span&gt;
    &lt;span class="c1"&gt;# connect to our service&lt;/span&gt;
    &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# NOTE: Below we are using 127.0.0.1 because this container&lt;/span&gt;
      &lt;span class="c1"&gt;# will run on the host network, thus it will have access to the&lt;/span&gt;
      &lt;span class="c1"&gt;# host network.&lt;/span&gt;
      &lt;span class="c1"&gt;# If it would not have run locally, we would have had to&lt;/span&gt;
      &lt;span class="c1"&gt;# connect using the service name like following:&lt;/span&gt;
      &lt;span class="c1"&gt;# amqp:rabbitmq_server:5672&lt;/span&gt;
      &lt;span class="nt"&gt;rabbitmq_uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;amqp://127.0.0.1:5672&lt;/span&gt;
    &lt;span class="c1"&gt;# Make it wait for rabbitmq deployment&lt;/span&gt;
    &lt;span class="nt"&gt;depends_on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rabbitmq_server&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With the above file, you can deploy it as follows:&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;docker-compose -f docker-compose.yml up --detach --scale worker=2 --build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the above command, we are scaling the &lt;code&gt;worker&lt;/code&gt; service to have 2 containers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Gotcha's to look out for&lt;/h2&gt;

&lt;h3&gt;Connection URI for RabbitMQ&lt;/h3&gt;

&lt;p&gt;Let's say we have RabbitMQ deployed in a container called &lt;code&gt;rabbitmq&lt;/code&gt;. Now, from our &lt;code&gt;worker&lt;/code&gt; container we need to access RabbitMQ in order to add tasks. In this case, we will have to connect to RabbitMQ using a connection URI. This URI will be something like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;amqp://rabbitmq:5672&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that we have name of the container in the URI. This will map the URI to the network of that container.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Typically this URI should be something like &lt;code&gt;amqp://localhost:5672&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, now, let's say we need to run our container in the network. This can be easily done using the &lt;code&gt;network_mode: host&lt;/code&gt; field in the compose file or the &lt;code&gt;--network=host&lt;/code&gt; arguement to the deploy command.&lt;/p&gt;

&lt;p&gt;In cases like this, our container will have the network of the host which means the RabbitMQ container will be accessible as it will be accessible to the network which will be:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;amqp://127.0.0.1:5672&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that we exposed the port 5672 when deploying the rabbitmq container.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/celery_compose</guid>
      <category>celery</category>
      <category>rabbitmq</category>
      <category>docker</category>
      <category>compose</category>
      <pubDate>Wed, 07 Apr 2021 19:04:47 +0000</pubDate>
    </item>
    <item>
      <title>Ytmdl Web Will Now Have Ads</title>
      <link>https://blog.deepjyoti30.dev/ytmdl-web-ads</link>
      <description>&lt;p&gt;As of today (01/04/2021), &lt;strong&gt;Ytmdl Web&lt;/strong&gt; will show ads. This was not intentional in any way and I honestly wanted to keep the app totally free for everyone. However, off late, the traffic that it has been getting, it has been very hard to handle the server costs for the app.&lt;/p&gt;

&lt;h2 id="some-backstory"&gt;Some backstory&lt;/h2&gt;

&lt;p&gt;Ytmdl Web V2 was released about a month ago. After release, I shared it on various places like Reddit and over night, it got a lot of hits. I got about 75k hits on my API within 1 and a half day. This hits were, obviously, not anticipated for and my server went out of space. I instantly fixed that issue by increasing the storage of the server and it was fixed. However, within a few hours after that, the server started responding with &lt;code&gt;500 Internal Server Error&lt;/code&gt; while trying to download songs.&lt;/p&gt;

&lt;p&gt;I took a look at the logs and as it turns out, because of so many requests in such a short time, my servers IP address was blocked by YouTube servers. This meant, I had to change servers. This is when I figured I had some free Heroku credits so within a few minutes I made some changes to the API and deployed it to Heroku. Since then, the traffic slowed down and the Youtube IP blocking issue has not occurred.&lt;/p&gt;

&lt;p&gt;It was going fine until a few days ago when users started facing issues again. As it turns out, the Heroku servers were going out of RAM and I didn't have enough credits to use a production server with like 8Gb of RAM. Thus, there was no way out. Even though the API worked, sometimes it stopped (usually when it gets a lot of subsequent requests at the same time).&lt;/p&gt;

&lt;h2 id="why-ads"&gt;Why Ads&lt;/h2&gt;

&lt;p&gt;I wanted to keep the web app self dependent and being able to get enough donations in order to handle the server costs. I was strictly against ads. You can see my comments on my &lt;a href="https://www.reddit.com/r/Piracy/comments/lsslbl/ytmdl_web_a_webapp_that_lets_you_download_music/"&gt;Reddit post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, a lot of people, after finding out about the server issues, suggested that I add basic banner ads. Some people even went as far as asking me to add ads and that they will specifically stop their ad blocker for my site (and people say Reddit people are hostile!). Anyway, at the time, I did not give it much thought since ads would ruin the look of the app.&lt;/p&gt;

&lt;p&gt;However, it has been a whole month since the release. The donations are almost non existent. The traffic reports show that I am still getting about &lt;strong&gt;4.2k&lt;/strong&gt; active users for the blog (even after a month of release). Thus, I thought, there was no other way but to enable ads in order to handle the costs.&lt;/p&gt;

&lt;h2 id="whats-next"&gt;Whats next?&lt;/h2&gt;

&lt;p&gt;Well, if you are an user of the app, you can consider disabling your ad blocker. I promise, it won't obstruct the flow of the app. If it does, feel free to enable it again. Also, if it does, you can reach out to me and inform me about that.&lt;/p&gt;

&lt;p&gt;I am planning to get a dedicated domain for the app as well. Let's just hope we get enough ad revenue. Fingers are crossed!&lt;/p&gt;

&lt;p&gt;Thanks for all the support till now! Really appreciate it. You can &lt;a href="https://ytmdl.deepjyoti30.dev"&gt;check the app here&lt;/a&gt; and &lt;a href="https://github.com/deepjyoti30/ytmdl-web-v2"&gt;it's source code here&lt;/a&gt;&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/ytmdl-web-ads</guid>
      <category>ytmdl</category>
      <category>web</category>
      <category>ads</category>
      <category>python</category>
      <pubDate>Thu, 01 Apr 2021 12:21:15 +0000</pubDate>
    </item>
    <item>
      <title>Automate Tests With GitHub Actions for Python</title>
      <link>https://blog.deepjyoti30.dev/tests-github-python</link>
      <description>&lt;p&gt;Since the addition of GitHub Actions, a lot of things, that previsouly we had to use third party services for, have become easier. Recently, an user raised an issue in my &lt;a href="https://github.com/deepjyoti30/downloader-cli"&gt;downloader-cli&lt;/a&gt; repository. He suggested that addition of tests would be greatly helpful. More importantly because that way when people make a PR, the tests would tell the developers if the PR can be accepted.&lt;/p&gt;

&lt;p&gt;So, I decided to add some nice tests for my app. &lt;code&gt;downloader-cli&lt;/code&gt; is written in Python and it is a small, simple, downloader library that features a highly customizable, responsive progressbar for the commandline.&lt;/p&gt;

&lt;h2 id="how-will-it-work"&gt;How will it work&lt;/h2&gt;

&lt;p&gt;The idea is simple. We will add a GitHub workflow file. This file will have the details as to when and what to do. For the sake of this example, I will make the tests run when a push is made to the &lt;code&gt;master&lt;/code&gt; branch or a pull request is made to the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;In case you don't already know, GitHub's workflow files are written in &lt;a href="https://yaml.org/"&gt;YAML&lt;/a&gt; and are pretty simple to get started with.&lt;/p&gt;

&lt;p&gt;You just need to create a directory named &lt;code&gt;.github&lt;/code&gt; and a subdirectory inside that named &lt;code&gt;workflows&lt;/code&gt;. Inside the subdirectory, you can add as many workflow files as you want, given that all of them follow proper syntax and are written in &lt;strong&gt;YAML&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id="adding-conditions-to-run"&gt;Adding Conditions to run&lt;/h2&gt;

&lt;p&gt;We will create a file named &lt;code&gt;tests.yml&lt;/code&gt; and add the basic conditions to make it run on PR's and Pushes.&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Run tests&lt;/span&gt;

&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;master&amp;quot;&lt;/span&gt;
  &lt;span class="nt"&gt;pull_request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;master&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above code does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add condition to run on &lt;code&gt;push&lt;/code&gt; on branch &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add condition to run on &lt;code&gt;pull_request&lt;/code&gt; on branch &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="add-the-job"&gt;Add the job&lt;/h2&gt;

&lt;p&gt;So once we tell GitHub about when to run the action, we also need to pass them some commands on what to do when running the action. These can be called as &lt;code&gt;jobs&lt;/code&gt;. One action file can have multiple jobs and jobs can depend on other jobs so that they will run only after the job they depend on is run.&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="nt"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Run in all these versions of Python&lt;/span&gt;
        &lt;span class="nt"&gt;python-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3.5&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;3.6&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;3.7&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;3.8&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;3.9&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Checkout the latest code from the repo&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout repo&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
        &lt;span class="c1"&gt;# Setup which version of Python to use&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Set Up Python ${{ matrix.python-version }}&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/setup-python@v2&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;python-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ matrix.python-version }}&lt;/span&gt;
        &lt;span class="c1"&gt;# Display the Python version being used&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Display Python version&lt;/span&gt;
        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python -c &amp;quot;import sys; print(sys.version)&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# Install the package using the setup.py&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install package&lt;/span&gt;
        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python setup.py install&lt;/span&gt;
        &lt;span class="c1"&gt;# Install pytest (you can use some other testing utility)&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install pytest&lt;/span&gt;
        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
          &lt;span class="no"&gt;python -m pip install --upgrade pip&lt;/span&gt;
          &lt;span class="no"&gt;pip install pytest&lt;/span&gt;
        &lt;span class="c1"&gt;# Run the tests. I&amp;#39;m using pytest and the file is in the tests directory.&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Run tests&lt;/span&gt;
        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pytest tests/test*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above code, we add a job with the name &lt;code&gt;test&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This job &lt;code&gt;runs-on&lt;/code&gt; the latest Ubuntu Version as deonoted by &lt;code&gt;ubuntu-latest&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We are using the &lt;code&gt;matrix&lt;/code&gt; strategy to run it for different python versions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we have added a few steps. The steps do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Checkout the latest code from the repo&lt;/li&gt;
&lt;li&gt;Setup the &lt;code&gt;python-version&lt;/code&gt; as passed by the matrix strategy.&lt;/li&gt;
&lt;li&gt;Display the python version (just cross check).&lt;/li&gt;
&lt;li&gt;Install the package. (In my case it is using the &lt;code&gt;setup.py&lt;/code&gt; file.)&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;pytest&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run the tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="push-the-code"&gt;Push the code&lt;/h2&gt;

&lt;p&gt;Once you have the file setup, you can try try out the changes by pushing the code to the master branch.&lt;/p&gt;

&lt;p&gt;Just do a push using &lt;code&gt;git&lt;/code&gt; and go to GitHub and open the &lt;code&gt;Actions&lt;/code&gt; tab. You will see a job running with the yellow indicator on the left. (The yellow means it is running).&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If you want to take a look at the actions of my repo, you can &lt;a href="https://github.com/deepjyoti30/downloader-cli/actions"&gt;check them here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, GitHub Actions can be used for various automations. Most useful usecase (at least for me) being the ability to add CI/CD pipelines which have made a lot of my deployments painless. You can see an example of that &lt;a href="https://github.com/deepjyoti30/ytmdl-web-v2/blob/master/.github/workflows/build-push.yml"&gt;in my ytmdl-web repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, in case you want to take a look at the file from my &lt;code&gt;downloader-cli&lt;/code&gt; repo, you can &lt;a href="https://github.com/deepjyoti30/downloader-cli/blob/master/.github/workflows/test.yml"&gt;check it here&lt;/a&gt;.&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/tests-github-python</guid>
      <category>tests</category>
      <category>python</category>
      <category>github</category>
      <category>devops</category>
      <pubDate>Fri, 26 Mar 2021 11:41:04 +0000</pubDate>
    </item>
    <item>
      <title>I rebuilt my blog with Nuxt, now it loads in seconds</title>
      <link>https://blog.deepjyoti30.dev/blog-redesign-nuxt</link>
      <description>&lt;blockquote&gt;
  &lt;p&gt;The repo is now open source and can be found &lt;a href="https://github.com/deepjyoti30/blog-frontend-v2"&gt;over here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;TL;DR: Rebuilt my blog (this page) with Nuxt in order to improve SEO and performance and give the whole thing a new look. Used Tailwind too (well, duh!)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I felt like it was about time I tried my hands on Nuxt. Considering that Vue is my goto frontend framework, Nuxt was inevitable to be skipped. Though, I cannot just &lt;em&gt;learn&lt;/em&gt; a language, I need to build something in order to get to know the language all around. So I started wondering what would be a perfect project to build with Nuxt.&lt;/p&gt;

&lt;h2&gt;Why Nuxt?&lt;/h2&gt;

&lt;p&gt;So in order to know what project would be perfect for Nuxt, I started researching a bit on why Nuxt would be better as compared to Vue. Obviously, I came across &lt;em&gt;SSR&lt;/em&gt; a lot more that I expected to. So it was time, I dived into SSR and built something that could benefit from it.&lt;/p&gt;

&lt;p&gt;If you would just do a google search &lt;code&gt;Why is SSR good&lt;/code&gt;, you'd be easily prompted to a lot of sites, however all these sites will have one thing in common, &lt;em&gt;SSR is good for SEO&lt;/em&gt;. You see where this is going?&lt;/p&gt;

&lt;p&gt;Out of all the apps that I have currently, this blog is the one that will be able to leverage SEO the most and yeah I was kinda bored of the old design, really started disliking it after a while.&lt;/p&gt;

&lt;p&gt;So that was that. I started rebuilding my blog. The backend is still the same. The same old API built on FastAPI.&lt;/p&gt;

&lt;h2&gt;Features&lt;/h2&gt;

&lt;p&gt;Yeah, I had to list down the features that I think are way better in this version. Some of the key highlights are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Way faster&lt;/li&gt;
&lt;li&gt;Improved SEO&lt;/li&gt;
&lt;li&gt;Better theme&lt;/li&gt;
&lt;li&gt;Better dark mode&lt;/li&gt;
&lt;li&gt;Comments (thanks to &lt;a href="https://utteranc.es/"&gt;utteranc.es&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Everything is better&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yeah, I honestly think this version is pretty good. I mean the older one was not bad by any means, but a lot of things were just not perfect for a blog. Things like the SEO takes the whole page a long way along.&lt;/p&gt;

&lt;h3&gt;Theme&lt;/h3&gt;

&lt;p&gt;Since I have recently started using Tailwind, I went with tailwind again and I have to admit, I like it a bit more every time I use it. It just makes so many things so much easier. Things like handling a dark theme. Talking about dark themes, consider checking out the dark theme. Just open the menu (if you're on mobile) and click on the sun icon.&lt;/p&gt;

&lt;p&gt;The themes are also set based on the device theme (if the user has not explicitly set a theme). I wanted to keep an option with &lt;em&gt;auto&lt;/em&gt; that would theme the site based on the users mobile, however, I just couldn't find the motivation to add that. Perhaps in the next release?!&lt;/p&gt;

&lt;h3&gt;Comments&lt;/h3&gt;

&lt;p&gt;Okay, this is a big one. I was just going through a blog site and I came accross &lt;a href="https://utteranc.es/"&gt;utterances&lt;/a&gt;, and I have to say it's a pretty neat idea. Like the whole thing is very easy to setup.&lt;/p&gt;

&lt;p&gt;However, I will have to call it both an &lt;em&gt;advantange&lt;/em&gt; and a &lt;em&gt;disadvantage&lt;/em&gt; that it is built on GitHub. This means, if the blog has readers that do not have a GitHub account, would not be able to comment.&lt;/p&gt;

&lt;p&gt;However, if the blog has readers that are mostly &lt;em&gt;techies&lt;/em&gt; (read people with GitHub account), then it is like a wish come true. I think being built on GitHub, it is like an extra push for &lt;em&gt;techies&lt;/em&gt; to comment.&lt;/p&gt;

&lt;p&gt;But, it is what it is, it depends on the readers whether it would be a good idea.&lt;/p&gt;

&lt;h3&gt;Redesigned share menu&lt;/h3&gt;

&lt;p&gt;So, the share menu is now redesigned. It still continues the old approach however. If your device supports native share, then the custom menu will not be shown. However, most PC's does not really support it (can't vouch for Windows, totally doesn't work on i3-gaps), so the custom menu is a great addition.&lt;/p&gt;

&lt;p&gt;Check it out by clicking on the share button at the end of the post, or at the top of the post.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I think, all things, considered, this was a pretty good chance for me to learn Nuxt and I totally enjoyed. I am already considering Nuxt for my upcoming projects. It's ofcourse good for SEO, however the whole SSR thing makes it very convinient to make the site performant. Also, really appreciate that the app is automatically built as a &lt;em&gt;PWA&lt;/em&gt;. Anyway, some more posts coming up in the following days, consider subscirbing to the newsletter!&lt;/p&gt;

&lt;p&gt;Also, the repo is now open source, in case you are interested, &lt;a href="https://github.com/deepjyoti30/blog-frontend-v2"&gt;check it out&lt;/a&gt;.&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/blog-redesign-nuxt</guid>
      <category>nuxt</category>
      <category>blog</category>
      <category>design</category>
      <category>performance</category>
      <pubDate>Sat, 20 Mar 2021 22:10:54 +0000</pubDate>
    </item>
    <item>
      <title>Ytmdl Web v2 is finally here. Here's what has changed!</title>
      <link>https://blog.deepjyoti30.dev/ytmdl-v2-release</link>
      <description>&lt;p&gt;So it's been in works since a while now. Yep. Ytmdl Web's V2. This time it is even better! Since the first version was released, it did get a lot of traffic but it was far from perfect so I felt like I owed it to the users to give them a new, better, aweseome version that would work flawlessly.&lt;/p&gt;

&lt;p&gt;So here it is. &lt;strong&gt;Ytmdl Web V2&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;Features&lt;/h2&gt;

&lt;p&gt;So this version &lt;strong&gt;does&lt;/strong&gt; come with a lot of changes and a lot of new features. Most importantly, this version is built from the ground up and it is not just a few changes on top of the older version, you can totally expect something way better. &lt;a href="https://ytmdl.deepjyoti30.dev"&gt;Go check it out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some of the new features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Way Faster (It's a proper PWA now so that means improved performance)&lt;/li&gt;
&lt;li&gt;Better Downloads&lt;/li&gt;
&lt;li&gt;User Settings&lt;/li&gt;
&lt;li&gt;Manual Metadata&lt;/li&gt;
&lt;li&gt;URL Support&lt;/li&gt;
&lt;li&gt;Open Source (yep, not a feature, but it is!!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Way Faster&lt;/h3&gt;

&lt;p&gt;The previous version was just a badly built webapp that wasn't optimized in many ways and it took ages to load. I have to admit, I was just a newbie getting started with Vue when I built that app and I am not going to call it one of the better apps I built. I agree, the functionality was good, it worked all right, but it was not perfect. You can see that for yourself in the following Lighthouse score of the older version.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/ytmdlweb-v1-score.png" alt="YtmdlWeb V1 Lighthouse Score" /&gt;
&lt;em&gt;Ytmdl Web v1 lighthouse score&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I know, Lighthouse score doesn't mean everything but it does indicate some of the important things that were skipped in the first iteration of the app.&lt;/p&gt;

&lt;p&gt;To fix those things, I finally built the second iteration from scratch. Keeping in mind everything. Most important change on this version is I have added &lt;a href="https://developers.google.com/web/tools/workbox"&gt;workbox&lt;/a&gt;. This means the app will be a proper Progressive Web App now and will load way faster since a lot of files will be cached once the first load is done.&lt;/p&gt;

&lt;p&gt;Also the code is improved a lot which compressed the overall app size to &lt;strong&gt;145KiB Gzipped&lt;/strong&gt;. This is important since devices with slow important might not be able to download large content at once.&lt;/p&gt;

&lt;p&gt;Anyway, check the lighthouse score of the newer version below. It is &lt;em&gt;almost&lt;/em&gt; perfect.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/ytmdlweb-v2-score.png" alt="Ytmdlweb V2 Lighthouse Score" /&gt;
&lt;em&gt;Ytmdl Web v2 lighthouse score&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Better Downloads&lt;/h3&gt;

&lt;p&gt;Not just the app, the backend is also redone this time. I will probably write a separate post about that later.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TL;DR: The backend is now rewritten using FastAPI and works way better.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This time, the backend is written in FastAPI and yeah, it is better in a lot of ways. However, one of the most important changes in this version of the API is that downloading the song is now done after the user has selected both the song and metadata.&lt;/p&gt;

&lt;p&gt;In the previous version, following was the flow:&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="nx"&gt;Song&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Downloaded&lt;/span&gt; &lt;span class="nx"&gt;song&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Selecte&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="nx"&gt;download&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this version, the flow is refactored to the following:&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="nx"&gt;Song&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Download&lt;/span&gt; &lt;span class="nx"&gt;song&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="nx"&gt;download&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This might not seem like a lot of improvement, but it is. In the previous version, we had to know which file the API was working since the first request which added a lot of overhead. That restriction is now gone with this release.&lt;/p&gt;

&lt;h3&gt;User Settings&lt;/h3&gt;

&lt;p&gt;On this version, user settings are introduced. There are settings like default song format. So if you select one format and keep it default, you wouldn't be asked to select it everytime. When I was building the app, I wanted to make sure that the user has the best experience possible and so User Settings were an important part of it.&lt;/p&gt;

&lt;p&gt;You can check user settings by going to the &lt;code&gt;/settings&lt;/code&gt; route in the webapp.&lt;/p&gt;

&lt;h3&gt;Manual Metadata&lt;/h3&gt;

&lt;p&gt;Yes. The CLI version has it so I thought the web version totally needed that feature, so here it is. Based on the various user reports in the CLI app, it seemed like this would be a necessary feature because no matter how many meta sources we add, there's always that one song from an Indie singer that doesn't exist in any servers. In cases like that people can now opt for manually inserting the metadata and downloading the song.&lt;/p&gt;

&lt;h3&gt;URL Support&lt;/h3&gt;

&lt;p&gt;Since the CLI version supported it, the web version needed to add support for &lt;strong&gt;Youtube URL's&lt;/strong&gt;, so here it is. Instead of entering a song name, you can just enter a valid YouTube URL and Ytmdl will automatically take you to the next page of selecting metadata. It's not much but it might come very handy at times.&lt;/p&gt;

&lt;h3&gt;Other Changes&lt;/h3&gt;

&lt;h4&gt;Addition of Opus&lt;/h4&gt;

&lt;p&gt;Not just the above, there are a lot of under the hood, quality of life patches. One of those is addition of &lt;strong&gt;Opus&lt;/strong&gt; as a song format. The previous version just supported &lt;strong&gt;m4a&lt;/strong&gt; and &lt;strong&gt;mp3&lt;/strong&gt; so this version adds one to the list.&lt;/p&gt;

&lt;h4&gt;Open Source&lt;/h4&gt;

&lt;p&gt;If you're a part of the Telegram Channel, you'd know that a lot of users keep asking if the Web version is open source so I gave it some thought and finally decided to make this version open source. Not just that, this version comes with container images that can be deployed right away so that you have the freedom of using a self hosted version. You can find the &lt;a href="https://github.com/deepjyoti30/ytmdl-web-v2"&gt;source here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am really excited to finally be able to release this version, especially considering the response that I got with the first version of the app. Also, if you feel like there are some settings that might be a nice addition to the current app, feel free to raise an issue on GitHub.&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/ytmdl-v2-release</guid>
      <category>ytmdl</category>
      <category>webapp</category>
      <category>vue</category>
      <category>python</category>
      <pubDate>Thu, 25 Feb 2021 22:05:46 +0000</pubDate>
    </item>
    <item>
      <title>Cache dynamic pages for better performance</title>
      <link>https://blog.deepjyoti30.dev/cache-dynamic-pages</link>
      <description>&lt;blockquote&gt;
  &lt;p&gt;UPDATE: Now you can see the refresh button in action. Just go to the &lt;a href="https://blog.deepjyoti30.dev"&gt;home page&lt;/a&gt; and it should show up. It will show up only when the background sync determines that some posts have changed in the upstream and the cached data is outdated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So you built a personal blog that loads the content when the user opens the page? In other words, you built a page that loads the content dynamically using an API which instead, actually stores the content of the post? Even I did that. My page, the one you're reading this post on, loads the post content and everything else using an API which handles everything.&lt;/p&gt;

&lt;h3&gt;Problem with dynamic loading&lt;/h3&gt;

&lt;p&gt;As much as it is convinient, it also creates an issue with performance. Let's take an example. My &lt;a href="https://blog.deepjyoti30.dev"&gt;blog's homepage&lt;/a&gt; loads the latest posts dynamically after the page is loaded. This means that, everytime an user opens the page, it will make a request to the API and fetch the latest blog posts.&lt;/p&gt;

&lt;p&gt;This, even though, is not much of an issue in terms of bandwidth, it is an issue in terms of speed. Just in case, your internet connection is slow or for some reason my API decides to die, the posts will not load and all an end user will be able to see is an infinite loading animation.&lt;/p&gt;

&lt;p&gt;So, how do we make the user feel like they don't have to wait? &lt;strong&gt;Cache&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;Cache your content&lt;/h3&gt;

&lt;p&gt;The content that you're loading, you can just cache it and store it in the browsers localstorage. That is a simple enough fix. When the page loads, check if there's a cache and if it is there, just show it to the user.&lt;/p&gt;

&lt;p&gt;If there is not cache then fetch the content and store in the cache so from the next time it can be fetched easily. Once the caching is done, you can just set an expiry for the cache and accordingly refresh it after it has expired.&lt;/p&gt;

&lt;h3&gt;Problem with caching&lt;/h3&gt;

&lt;p&gt;There is one issue with caching though. Let's say an user visited my blog 10:30 in the morning and the posts that the user fetches at that moment are cached. Let's say the posts are cached for 2 hours. So if this user visits the same page in the next two hours, they'll be able to see the cached version of the page. However, let's say at 11:15 I push a new blog. So that means, this user will not be able to see this post until and unless they visit the page after 12:30.&lt;/p&gt;

&lt;p&gt;This is troublesome and not the desired outcome. So how do we fix it?&lt;/p&gt;

&lt;h4&gt;Sync cache in the background&lt;/h4&gt;

&lt;p&gt;So let's say we have the cached posts now and when the user visits next, they see this cached content. So once we show this posts to the user, we can just run a background process that will fetch the latest posts from the API. It will then check if the posts cached locally are different from the cached returned by the API and if that is the case, it will update the cache in the background.&lt;/p&gt;

&lt;p&gt;Once that is done, the next time the page loads, the user will see the latest post. This is highly effective to keep the page performant as well as keep the latest posts fetched at the same time. In terms of bandwidth, I don't think it is a major issue since an API call will bearly take a few Kilobytes which is nothing as compared to those large fontawesome css files ;-/.&lt;/p&gt;

&lt;p&gt;Taking the above example again, the user will now be able to see the latest content when the user refreshes the page.&lt;/p&gt;

&lt;h3&gt;Going beyond&lt;/h3&gt;

&lt;p&gt;Well, if you're feeling really ambitious, perhaps you can add a feature to show a button when the cache is detected to be outdated? That way once the cache is synced in the background and updated, the user will just see a button, clicking which will just refresh the page (or perhpas just re-render the content) and the overall experience will be way more fluid.&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/cache-dynamic-pages</guid>
      <category>cache</category>
      <category>dynamic</category>
      <category>pages</category>
      <category>improve</category>
      <pubDate>Fri, 08 Jan 2021 18:47:49 +0000</pubDate>
    </item>
    <item>
      <title>Python has a built in search function. Here's how to use it</title>
      <link>https://blog.deepjyoti30.dev/pythons-builtin-search-function</link>
      <description>&lt;p&gt;I was going through the Python docs and guess what I came across? A function that helps you get closest matches to a list of other strings. Now why would that function be useful, you'd ask. Let me give you a proper example.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TL;DR: Python has a built in function &lt;code&gt;get_close_matches&lt;/code&gt; that computes &lt;a href="https://en.wikipedia.org/wiki/Jaccard_index"&gt;jaccard&lt;/a&gt; in order to determine if two strings are similar and accordingly finds the closest matches.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;The problem&lt;/h3&gt;

&lt;p&gt;About 1 and a half years ago, I was working on &lt;a href="https://github.com/NISH1001/playx"&gt;playx&lt;/a&gt;. It is a tool that lets you stream music from the commandline directly from YouTube. While working on it, we decided that adding a feature to cache the files would be pretty nice. Now, while implementing that, we came across a problem. We needed to check if a song is already cached.&lt;/p&gt;

&lt;p&gt;Now, the issue is, on YouTube, one song is uploaded by various channels which means the titles vary and since we were caching the songs using the title of the video from YouTube, that meant that if we did a direct match of the titles, it would be a very inefficient way to check if the song has been cached already.&lt;/p&gt;

&lt;p&gt;For example, if we have the song name &lt;code&gt;Sundown&lt;/code&gt;. This song might have been saved as &lt;code&gt;Sundown - Gordon Lightfoot&lt;/code&gt;. However, the next time user tries to play the same song which had a different title, something like &lt;code&gt;Sundown - Lyrics only | Gordon Lightfoot&lt;/code&gt;. In  this case, a simple match would indicate that both songs are different and the tool would end up caching both even though the songs are same.&lt;/p&gt;

&lt;p&gt;If you got an idea of the problem from reading the above, I think you would agree with me that it is similar to searching a particular file in a list of files.&lt;/p&gt;

&lt;h4&gt;Solving the above problem the hard way&lt;/h4&gt;

&lt;p&gt;At that point, &lt;a href="https://github.com/NISH1001"&gt;Nishan&lt;/a&gt; came up with a nice solution to find songs that are similar to each other and not cache them.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TL;DR: Compute jaccard for the song name passed by the user and the list of files we have which will give us a relative idea of how similar a song is to the other based on the title.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First things first, if we look at the two title &lt;code&gt;Sundown&lt;/code&gt; and &lt;code&gt;Sundown - Gordon Lightfoot&lt;/code&gt;, we would think that the titles might mean it's the same song (to some extent). So how do we check that using our code?&lt;/p&gt;

&lt;p&gt;One solution to do that is to compute jaccard between the two titles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Jaccard_index"&gt;Jaccard Coefficient&lt;/a&gt; is a coefficient that is calculated between two similar entitites and it indicates how similar the two entities are. It is a &lt;code&gt;naive&lt;/code&gt; way to find it, but atleast, it works better than direct matching.&lt;/p&gt;

&lt;p&gt;So how do we compute the jaccard between two strings? From the wiki definition, jaccard is the ratio of all the similar properties of the two entities upon all the possible properties of the two entities. That means, it would be a ratio of all the similar characters in the two strings upon all the unique characters in the two strings.&lt;/p&gt;

&lt;p&gt;How do we find that by code?&lt;/p&gt;

&lt;p&gt;We can just split the two strings into sets. We can then, find the ratio of the sets intersection upon the sets union.&lt;/p&gt;

&lt;p&gt;Following code does exactly that&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute_jaccard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second_string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;first_str_chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
   &lt;span class="n"&gt;second_str_chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;second_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

   &lt;span class="n"&gt;similarity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_str_chars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;second_str_chars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;all_unique_chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_str_chars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;union&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;second_str_chars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_unique_chars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above code has a function that accepts two strings. It splits the two strings based on space into sets. The sets are then intersected and union'ed. Finally the jaccard is computed by counting the number of similar words to the number of total unique words.&lt;/p&gt;

&lt;p&gt;Once we have the &lt;code&gt;jaccard_coefficient&lt;/code&gt;, we can just keep a minimum amount that the jaccard should be which would indicate how similar the two string would be.&lt;/p&gt;

&lt;p&gt;For example, if we have a jaccard coefficient of 0.75, it means the two strings are 75% (0.75 * 100) similar.&lt;/p&gt;

&lt;h4&gt;In a search algorithm&lt;/h4&gt;

&lt;p&gt;We can use the above logic to sort a list of results based on the jaccard coefficient computed and accordingly find the most similar files based on their names.&lt;/p&gt;

&lt;h3&gt;Python's built in solution&lt;/h3&gt;

&lt;p&gt;Python has a built in function in the &lt;code&gt;difflib&lt;/code&gt; package named as &lt;code&gt;get_close_matches&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It takes four arguments in the following order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;word&lt;/code&gt;: The string which we are searching for&lt;/li&gt;
&lt;li&gt;&lt;code&gt;possibilites&lt;/code&gt;: The list of strings we are searching it in&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;: Indicates how many results to return based on the search. By default it is set to &lt;code&gt;3&lt;/code&gt;. Can be a positive integer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cutoff&lt;/code&gt;: An float between 0 and 1 which will effectively how similar the two strings should be. By default set to &lt;code&gt;0.6&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you look at the above parameters are bit carefully, you'll see that the &lt;code&gt;cutoff&lt;/code&gt; might be effectively the value of the jaccard coefficient that will indicate how similar the two strings are.&lt;/p&gt;

&lt;p&gt;Let's get back to our initial problem. We want to see if a song similar to that entered by the user is already cached.&lt;/p&gt;

&lt;p&gt;So, if we have a list of already cached files and we have the name of the song user entered, we can find if that song exists in the following way:&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;difflib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_close_matches&lt;/span&gt;

&lt;span class="n"&gt;song_user_entered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sundown&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;cached_songs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="s2"&gt;&amp;quot;Sundown Gordon Lightfoot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;&amp;quot;Sundown lyrics gordon lightfoot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;&amp;quot;sundown hd audio gordon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;&amp;quot;some other song&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;&amp;quot;couchiching gordon lightfoot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;&amp;quot;never gonna give you up&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_close_matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;song_user_entered&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cached_songs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# results is an emtpy list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above code runs all right but we get an empty list. This is because the &lt;code&gt;cutoff&lt;/code&gt; parameter (how similar the strings are) is set to &lt;code&gt;0.6&lt;/code&gt; by default and none of the strings pass that number if you try checking that.&lt;/p&gt;

&lt;p&gt;Instead, if we lower the cutoff in the following way:&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_close_matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;song_user_entered&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cached_songs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cutoff&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# results is [&amp;#39;Sundown Gordon Lightfoot&amp;#39;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;code&gt;cutoff&lt;/code&gt; parameter is the value of jaccard which the function uses to filter out the results.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thus, now, we know that one of the results was similar.&lt;/p&gt;

&lt;h3&gt;Verifying if Jaccard is computed&lt;/h3&gt;

&lt;p&gt;Just for fun, let's see if actually, jaccard is being calculated by the &lt;code&gt;get_close_matched&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;First, we will compute the jaccard ourselves using our &lt;code&gt;compute_jaccard&lt;/code&gt; function and then we will see if the results match.&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;song&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cached_songs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;song&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;compute_jaccard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;song&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;song_user_entered&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Above gives us the following output:&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;Sundown Gordon Lightfoot 0.3333333333333333&lt;/span&gt;
&lt;span class="go"&gt;Sundown lyrics gordon lightfoot 0.25&lt;/span&gt;
&lt;span class="go"&gt;sundown hd audio gordon 0.0&lt;/span&gt;
&lt;span class="go"&gt;some other song 0.0&lt;/span&gt;
&lt;span class="go"&gt;couchiching gordon lightfoot 0.0&lt;/span&gt;
&lt;span class="go"&gt;never gonna give you up 0.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which justifies the result that only the first string is returned by the &lt;code&gt;get_close_matches&lt;/code&gt; function. Thus, we know that the function uses &lt;code&gt;jaccard&lt;/code&gt; to determine similarity.&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/pythons-builtin-search-function</guid>
      <category>python</category>
      <category>search</category>
      <category>function</category>
      <category>builtin</category>
      <pubDate>Mon, 04 Jan 2021 20:16:05 +0000</pubDate>
    </item>
    <item>
      <title>Get all tables used in join from SQLAlchemy</title>
      <link>https://blog.deepjyoti30.dev/get-all-tables-sqlalchemy-join</link>
      <description>&lt;p&gt;Recently, I was working on one of my projects and I came across this issue of joining two tables. Now the thing is, I mostly stay away from using SQL and prefer to go with NoSQL databases, however this time, the requirement was to go with PostgreSQL so I ended up setting it up. Since the language I used for building backend services is Python (mostly &lt;code&gt;FastAPI&lt;/code&gt;), I went with &lt;code&gt;SQLAlchemy&lt;/code&gt; in order to connect to the database and get the proper data.&lt;/p&gt;

&lt;p&gt;I actually think that it is a great library to connect to the database. I understand it's a bit of a hassle to set it up at the beginning but that set up actually helps a lot. Since, you set up a proper types etc for each column, it's easier to have proper type checking and avoid errors in the long run.&lt;/p&gt;

&lt;p&gt;Anyway, to be honest, I am kind of liking using PostgreSQL and since it is &lt;code&gt;the&lt;/code&gt; language a lot of the Python developers use so I thought it will be worth trying it out. Now, I don't want to be hating on MySQL but honestly I feel like it is way too old school.&lt;/p&gt;

&lt;h3&gt;The problem ?&lt;/h3&gt;

&lt;p&gt;Well, my problem was I needed two tables. One would be a child table and the parent would keep a reference to the child. However, when I make a query I wanted to join the table and get an unified output.&lt;/p&gt;

&lt;p&gt;So, I created the two tables in the following way.&lt;/p&gt;

&lt;p&gt;Create the child table:&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cid&lt;/span&gt; &lt;span class="nb"&gt;serial&lt;/span&gt; &lt;span class="k"&gt;primary&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child_name&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create the parent table:&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="nb"&gt;serial&lt;/span&gt; &lt;span class="k"&gt;primary&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent_name&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="nb"&gt;serial&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once both the tables are created, I added a reference to the child id in the child column for the parent table.&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;alter&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="k"&gt;foreign&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;references&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Fetching using a join&lt;/h4&gt;

&lt;p&gt;Now, let's enter some sample data in the tables and try to fetch them the way we want it.&lt;/p&gt;

&lt;p&gt;After entering the data, the tables looked like this&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=#&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;parent_name&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; 
&lt;span class="c1"&gt;-----+-------------+-------&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="n"&gt;Parent&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=#&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;cid&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;child_name&lt;/span&gt; 
&lt;span class="c1"&gt;-----+------------&lt;/span&gt;
   &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="n"&gt;Child&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, as seen above, the parent with id &lt;code&gt;1&lt;/code&gt; is referencing a child with id &lt;code&gt;2&lt;/code&gt;. If we want to fetch both the above data together, we would do a join. For example, the tables can be joined in the following way.&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=#&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="k"&gt;left&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;parent_name&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;cid&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;child_name&lt;/span&gt; 
&lt;span class="c1"&gt;-----+-------------+-------+-----+------------&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="n"&gt;Parent&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="n"&gt;Child&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When we join the tables using a left join on the child id, we get the above output, which is just perfect. However, this is just the command on the SQL console. We need to do the same command in SQLAlchemy and get the same data so that it will be easier for us.&lt;/p&gt;

&lt;h4&gt;Joining two tables in SQLAlchemy&lt;/h4&gt;

&lt;p&gt;I tried joining the tables as pointed by a lot of &lt;a href="https://stackoverflow.com/questions/50617343/how-to-join-data-from-two-tables-in-sqlalchemy"&gt;StackOverflow&lt;/a&gt; answers. However, that just didn't work.&lt;/p&gt;

&lt;p&gt;Now the answer basically says that we can do a join like in the following way:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Assuming you created a Session object from SQLAlchemy which would be named as &lt;code&gt;db&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Anyone with a basic understanding of Python would think that the above result would return a Parent object with the Child attributes included since that is what we understand from the table outputs that SQL provides us.&lt;/p&gt;

&lt;p&gt;Like, if we run a basic join command, like in the above part, we get one table with both the child and the parent rows included.&lt;/p&gt;

&lt;p&gt;However, this is not the case in &lt;code&gt;SQLAlchemy&lt;/code&gt;. They actually work a bit different.&lt;/p&gt;

&lt;h4&gt;How and Why does SQLAlchemy do that?&lt;/h4&gt;

&lt;p&gt;So, in SQLAlchemy, when the above statement is run, it returns a &lt;code&gt;Parent&lt;/code&gt; object with just the parent attributes. Now, I was expecting that they would provide us an object with both the attributes from &lt;code&gt;Parent&lt;/code&gt; and &lt;code&gt;Child&lt;/code&gt; but they didn't.&lt;/p&gt;

&lt;p&gt;Here's a logical solution as to why they do not do that. If we want an object with both the parent and child attributes, that would mean we would get an object of a Class that has both the &lt;code&gt;Parent&lt;/code&gt; class and the &lt;code&gt;Child&lt;/code&gt; class. In other words, if we do a join in &lt;code&gt;SQLAlchemy&lt;/code&gt;, they would have to create a new &lt;code&gt;Class&lt;/code&gt; that would inherit from all the table classes that are present in the join.&lt;/p&gt;

&lt;p&gt;This behaviour, even though, it would make developers lives easier, would be pretty inefficient. Creating classes on the fly like that (as far as I understand) would be a total mess and would not be an optimized solution for a library that is used by so many people.&lt;/p&gt;

&lt;h3&gt;The Solution&lt;/h3&gt;

&lt;p&gt;What is the solution you may ask. Well, it's not that difficult. Since, we understand the problem now which is that &lt;code&gt;SQLAlchemy&lt;/code&gt; cannot just create dynamic classes with columns from more than one table, why don't we pass it the tables we want it to work on? That way it will return us all the tables we need and run a proper join on them as well.&lt;/p&gt;

&lt;p&gt;So, in our situation, we need two tables from &lt;code&gt;SQLAlchemy&lt;/code&gt;, one being the &lt;code&gt;Parent&lt;/code&gt; table and the other the &lt;code&gt;child&lt;/code&gt; table. So we can do something like the following:&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above statement returns two objects, one is a &lt;code&gt;Parent&lt;/code&gt; object with all the parent columns and the second a &lt;code&gt;Child&lt;/code&gt; object with all the child details. Thus we have all the data that we needed and we can just do whatever we want with this data now.&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/get-all-tables-sqlalchemy-join</guid>
      <category>all</category>
      <category>tables</category>
      <category>sqlalchemy</category>
      <category>python</category>
      <pubDate>Sat, 19 Dec 2020 18:57:10 +0000</pubDate>
    </item>
    <item>
      <title>Happiness status of your GitHub repo: repostatus</title>
      <link>https://blog.deepjyoti30.dev/repostatus-how</link>
      <description>&lt;p&gt;People always ask \"why this repo\" and never ask \"how is this repo\", so I created an app that finds how &lt;strong&gt;happy&lt;/strong&gt; a repository is.\n\nTLDR; The app runs a sentiment analysis engine on your repo and finds how happy it is. Check &lt;a href="https://repostatus.deepjyoti30.dev"&gt;repostatus&lt;/a&gt;\n\n## How?\n\nSo how exactly do you find the sentiment of a non living thing? Well, even I had that thought in my mind. Any repository is made up of people that contribute to that repo, people that interact in the repo's comments.\n\nSo, if we are able to run a sentiment analysis engine on the interactions of the people that are contributing to that repo, we might get somewhere?\n\n&lt;code&gt;repostatus&lt;/code&gt; extracts three important part of the repo (by using GitHub's API):\n\n- the commit messages\n- the comments on the issues\n- the comments on PR's\n\nOnce, we have these three things, we can combine them, filter out the unnecessary data and run our engine on it.\n\n## Tech\n\nThe backend is written in &lt;code&gt;Python&lt;/code&gt; (FastAPI) and the frontend is written in &lt;code&gt;Vue&lt;/code&gt;\n\nFirst things first,  the sentiment analysis engine used by  &lt;code&gt;repostatus&lt;/code&gt; is the &lt;a href="https://textblob.readthedocs.io/en/dev/"&gt;textblob&lt;/a&gt; library. It is very easy to use and works great.\n\nSo now that we have the engine at our ease, what's next.\n\n### Backend\n\nMy goto tech stack is Python so no wonder I went with that for the API.\n\nI used &lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt; for the backend. Off late, I have started liking &lt;code&gt;FastAPI&lt;/code&gt; more and more and it was an obvious no brainer to go with it for the backend. It's ease of use with the efficiency is just awesome. If you haven't checked it out, do that, I'm sure you'll love it if you're a Python developer.\n\n#### Services\n\nServices that the API will offer are:\n\n1. Internal API for the webapp\n2. Public API\n3. Badge API (Yep, you can use repostatus badges on your README).\n\nI wanted to provide a Public API so that people would be able to use it for their own fun projects. The API is capable of working with both private and public repo's. The details for that can be found &lt;a href="https://repostatus.deepjyoti30.dev/api"&gt;here&lt;/a&gt;\n\nThe badge is another thing that I thought would be a nice little addition. This badge works similar to how the &lt;code&gt;travis&lt;/code&gt; build badges work or any badge. You can simply use the URL to embed it into your repositories README.\n\nMore details about the badge can be found &lt;a href="https://repostatus.deepjyoti30.dev/badge"&gt;here&lt;/a&gt;.\n\n\n\n### Frontend\n\nI love using VueJS. It was obvious that I would use that to build the frontend. Now for the frontend I wanted to make sure that it doesn't restrict the user too much.\n\nThus, &lt;code&gt;repostatus&lt;/code&gt; works with both private and public repos. For private repos, GitHub's OAuth is used which gives us access to that particular repo and then we run the engine over the repo.\n\nOne issue that I faced while implementing the OAuth was that I wanted to make the process seamless. If you go the the app now and select on the OAuth option, you will see the process is pretty neat.\n\nHere's what it does:\n\n1. Opens a new window and asks the user to give access\n2. User gives access and GitHub redirects the user to my sites &lt;code&gt;callback&lt;/code&gt; endpoint.\n3. Window closes and the app shows all the users repos.\n\nThe above steps makes it look real seamless. However, the hard part for me was to figure out how do I know when the OAuth is done and then show the window.\n\n#### Seamless OAuth\n\nSo in order to make it seamless, I implemented the following flow:\n\n1. User clicks on OAuth button, new window is opened and the app keeps waiting for it to close.\n2. In the new window, the user is redirected to the callback URL which returns a nice HTML page that shows the user that the window will close in 5 secs. After 5 seconds the window closes and the app knows that the OAuth is done.\n3. The app then tries to find the repo's of that user and accordingly shows the user all the repos.\n\nI know, it's not much. I have to say, though, I really liked implementing this one little feature and making it so seamless. I'm not even kidding, I just kept on doing OAuth on repeat after implementing it, for a while.\n\n## Badge\n\nAn example of the badge can be seen below.\n\n&lt;img src="https://apis.deepjyoti30.dev/repostatus/badge?repo=deepjyoti30%2Fytmdl&amp;amp;style=for-the-badge" alt="[RepoStatus](https://repostatus.deepjyoti30.dev/badge)" /&gt;\n\nIsn't it cool?! It supports options like &lt;code&gt;style&lt;/code&gt; of the badge where &lt;code&gt;for-the-badge&lt;/code&gt; can be used. It changes the color of the badge based on the &lt;code&gt;happiness status&lt;/code&gt; of the repo.\n\n## How is happiness exactly calculated\n\nAs I mentioned earlier, the happiness of any repo depends on certain parts of the repo. Thus, once the &lt;code&gt;commit messages&lt;/code&gt;, &lt;code&gt;issue comments&lt;/code&gt; and the &lt;code&gt;PR's comments&lt;/code&gt; are extracted, they are run through a filter.\n\n### Filtering the data\n\nThis step makes sure that the data is cleared off of any unreadable content, like an image that the user might have posted in the comments. Or some code inside a code block that the user might have added in an issue report.\n\n### Running the engine\n\nOnce the data is cleared off all the unreadable content, it is passed to the &lt;code&gt;textblob&lt;/code&gt; library that runs the engine on the data.\n\nNow, this library returns a float &lt;code&gt;score&lt;/code&gt;. This score is between -1 and +1 where +1 indicates &lt;code&gt;happy&lt;/code&gt; and -1 indicates &lt;code&gt;sad&lt;/code&gt;.\n\nThus, when the engine is run on the comments, let's say we get a score of 0.8, this means, based on the comments, the repo is not &lt;code&gt;that&lt;/code&gt; happy but it's more happier as compared to being sad. So &lt;code&gt;repostatus&lt;/code&gt; considers that based on the comments the repo is &lt;code&gt;happy&lt;/code&gt;.\n\nWe do the above process on other aspects of the repo too, the commit messages etc.\n\nOnce, all the individual scores are available, they are added up and an average is calculated. This average, mathematically, is also between &lt;code&gt;-1&lt;/code&gt; and &lt;code&gt;+1&lt;/code&gt;. This is the overall &lt;code&gt;happiness status&lt;/code&gt; of the repo.\n\nBased on this score, it is decided what color is to be assigned to the repo.\n\n### Caching\n\nSince the engine takes a pretty hefty amount of memory, the score of any repo is cached for 15 days.\n\nThe badges are cached for 24 hours and only after that they are updated.\n\nThis caching was necessary in order to make sure the performance of the API was not effected.\n\n### Try &lt;a href="https://repostatus.deepjyoti30.dev"&gt;repostatus here&lt;/a&gt;\n\n### Source\n\n&lt;code&gt;repostatus&lt;/code&gt; is open source. Source for the backend and the frontend can be found below\n\n{% github trotsly/repostatus %}\n\n\n&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/repostatus-how</guid>
      <category>webdev</category>
      <category>javascript</category>
      <category>python</category>
      <category>opensource</category>
      <pubDate>Wed, 09 Dec 2020 19:51:23 +0000</pubDate>
    </item>
    <item>
      <title>Add tab autocomplete for your commandline apps</title>
      <link>https://blog.deepjyoti30.dev/tab-autocomplet-cli-apps</link>
      <description>&lt;p&gt;It so happens a lot of times that we don't notice small things that help us a lot in our day to day life. Since I am most of the time in front of the terminal, one feature that helps me a lot is the ability to autocomplete.&lt;/p&gt;

&lt;p&gt;I know it's a simple, sweet feature but it is something I use a lot in my everyday usage of the Terminal. So I started wondering, how do I add something like that to &lt;a href="https://github.com/deepjyoti30/ytmdl"&gt;ytmdl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I came across &lt;a href="https://eli.thegreenplace.net/2013/12/26/adding-bash-completion-for-your-own-tools-an-example-for-pss"&gt;this article&lt;/a&gt;. It is pretty detailed for &lt;code&gt;bash&lt;/code&gt;. However I also wanted to add support for &lt;code&gt;zsh&lt;/code&gt; since that's the shell I use.&lt;/p&gt;

&lt;h1&gt;How does it work?&lt;/h1&gt;

&lt;p&gt;So how does this feature exactly work? It is simple. We create a file with a chunk of code (written in shell) and we save it in a particular location. From this location the file will be automatically picked up by the shell and it will accordingly start showing autocomplete suggestions.&lt;/p&gt;

&lt;h2&gt;Before writing the file&lt;/h2&gt;

&lt;p&gt;So in our chunk of code, we will keep a list of options and from there the shell will be automatically able to suggest options. But it would be pretty tedious if we have to manually update the shell file with options that our commandline app would support everytime.&lt;/p&gt;

&lt;p&gt;Thus we will add a new option to our commandline app. When this option (or flag) will be passed, our app will just print a space seperated list of options to the console and exit. This way, we will be able to use this command in our shell file whenever we want to build it.&lt;/p&gt;

&lt;p&gt;In my case, I added a flag named &lt;code&gt;--get-opts&lt;/code&gt; to my app (ytmdl). I then made sure that this flag is hidden by the argument parser so that users do not see it directly.&lt;/p&gt;

&lt;p&gt;This can be done in the following way for Python with the argparse module&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--get-opts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;store_true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SUPPRESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# And later in the code, check for the option and accordingly generate a list of&lt;/span&gt;
&lt;span class="c1"&gt;# options&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_opts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Writing the completion file for Bash&lt;/h2&gt;

&lt;p&gt;Even though the file will be pretty much same for all the shells, there are certain differences which needs to be maintained.&lt;/p&gt;

&lt;p&gt;The file should be written in the following way:&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;_ytmdl_complete&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;local&lt;/span&gt; cur_word prev_word type_list

    &lt;span class="c1"&gt;# COMP_WORDS is an array of words in the current command line.&lt;/span&gt;
    &lt;span class="c1"&gt;# COMP_CWORD is the index of the current word (the one the cursor is&lt;/span&gt;
    &lt;span class="c1"&gt;# in). So COMP_WORDS[COMP_CWORD] is the current word; we also record&lt;/span&gt;
    &lt;span class="c1"&gt;# the previous word here, although this specific script doesn&amp;#39;t&lt;/span&gt;
    &lt;span class="c1"&gt;# use it yet.&lt;/span&gt;
    &lt;span class="nv"&gt;cur_word&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;COMP_WORDS&lt;/span&gt;&lt;span class="p"&gt;[COMP_CWORD]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;prev_word&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;COMP_WORDS&lt;/span&gt;&lt;span class="p"&gt;[COMP_CWORD-1]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# Ask ytmdl to generate a list of types it supports&lt;/span&gt;
    &lt;span class="nv"&gt;type_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;ytmdl --get-opts&lt;span class="sb"&gt;`&lt;/span&gt;

    &lt;span class="c1"&gt;# Only perform completion if the current word starts with a dash (&amp;#39;-&amp;#39;),&lt;/span&gt;
    &lt;span class="c1"&gt;# meaning that the user is trying to complete an option.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;cur_word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; -* &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="c1"&gt;# COMPREPLY is the array of possible completions, generated with&lt;/span&gt;
        &lt;span class="c1"&gt;# the compgen builtin.&lt;/span&gt;
        &lt;span class="nv"&gt;COMPREPLY&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;compgen&lt;/span&gt; -W &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;type_list&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -- &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;cur_word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nv"&gt;COMPREPLY&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;type_list&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Register _ytmdl_complete to provide completion for the following commands&lt;/span&gt;
&lt;span class="nb"&gt;complete&lt;/span&gt; -F _ytmdl_complete ytmdl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code pretty self explanatory. I have defined a function. This function uses the &lt;code&gt;current word&lt;/code&gt; in order to check if it starts with a &lt;code&gt;-&lt;/code&gt;. If it does, it means we need to suggest the options. In that case we are generating related words by using the &lt;code&gt;compgen&lt;/code&gt; command. This command will return all the options that start with the given current word.&lt;/p&gt;

&lt;p&gt;If the current word does not start with a &lt;code&gt;-&lt;/code&gt; we are suggesting all the possible options.&lt;/p&gt;

&lt;p&gt;The last line &lt;code&gt;complete ...&lt;/code&gt; basically tells the shell (bash in this case) to call the function for the command &lt;code&gt;ytmdl&lt;/code&gt;. It can be followed by more commands where this function should be called for completions.&lt;/p&gt;

&lt;p&gt;For example, to complete the command &lt;code&gt;ytmdl&lt;/code&gt; and &lt;code&gt;ytm&lt;/code&gt; with the suggestions, we can do something like this.&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;complete&lt;/span&gt; -F _ytmdl_complete ytmdl ytm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once we have the file ready, we need to place it in a directory from where it can be recognized by the shell.&lt;/p&gt;

&lt;p&gt;For bash this directory is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;**/etc/bash_completion.d**&lt;/code&gt; or &lt;code&gt;**/usr/share/bash-completion/completions/**&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Just place the file in either of the above directories and it try to run the command. Click tab after typing the command and you will see your suggestions.&lt;/p&gt;

&lt;h2&gt;Writing the completion file for zsh&lt;/h2&gt;

&lt;p&gt;In zsh, the logic remains same. We have a file that will be put in a specific directory and will be picked up by the shell. Just the syntax differs a bit.&lt;/p&gt;

&lt;p&gt;The file for ZSH will be the following:&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#compdef ytmdl&lt;/span&gt;

__ytmdl&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;curcontext&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$curcontext&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; cur_word
    &lt;span class="nb"&gt;typeset&lt;/span&gt; -A opt_args

    &lt;span class="nv"&gt;cur_word&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$words&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;CURRENT&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;type_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;ytmdl --get-opts&lt;span class="sb"&gt;`&lt;/span&gt;

    &lt;span class="c1"&gt;# Only perform completion if the current word starts with a dash (&amp;#39;-&amp;#39;),&lt;/span&gt;
    &lt;span class="c1"&gt;# meaning that the user is trying to complete an option.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;cur_word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; -* &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="c1"&gt;# COMPREPLY is the array of possible completions, generated with&lt;/span&gt;
        &lt;span class="c1"&gt;# the compgen builtin.&lt;/span&gt;
        _arguments &lt;span class="s1"&gt;&amp;#39;*: :( $(compgen -W &amp;quot;${type_list}&amp;quot; -- ${cur_word}) )&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        _arguments &lt;span class="s1"&gt;&amp;#39;*: :( &amp;quot;${type_list}&amp;quot; )&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

__ytmdl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this file, we have the &lt;code&gt;__ytmdl&lt;/code&gt; function which is called in order to generate the suggestions.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NOTE: In zsh completion file, the first line should be as above. It should be &lt;code&gt;compdef &amp;lt;command_name&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this the command (that is to be completed) is passed in the first line of the file and rest of the code is just normal shell code. We have a function which is called to generate the options. The options are then passed to zsh by using the &lt;code&gt;_arguments&lt;/code&gt; variable which is automatically picked up by zsh BTW.&lt;/p&gt;

&lt;p&gt;For zsh, the directory is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;**/usr/share/zsh/site-functions/**&lt;/code&gt; or &lt;code&gt;**/usr/share/zsh/functions/Completion/Unix/**&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After putting the file in the above directory, to make sure the file is loaded the following can be done:&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# source the rc file&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ~/.zshrc

&lt;span class="c1"&gt;# Load the function&lt;/span&gt;
autoload -U __ytmdl  &lt;span class="c1"&gt;# Here the function name is __ytmdl, replace accordingly.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For more details about writing zsh completion files, check &lt;a href="https://github.com/zsh-users/zsh-completions/blob/master/zsh-completions-howto.org"&gt;this GitHub doc&lt;/a&gt;. It is pretty detailed and useful if you want to dive deep into writing a nice optimized completion file.&lt;/p&gt;

&lt;h2&gt;Tips&lt;/h2&gt;

&lt;p&gt;Okay, now that you have written your completion file, what next? Well, there's one thing else that you can still do in order to optimize the file. That is, since in the completion file the options are loaded by running the command &lt;code&gt;ytmdl --get-opts&lt;/code&gt;. This means everytime the user will click on the tab button twice, your app (in this case &lt;code&gt;ytmdl&lt;/code&gt;) will be called. That is not necessary and will be slow since we can call the function once and hardcode the options when the file is built.&lt;/p&gt;

&lt;p&gt;Here's how we can do it. First of all, replace the command in the completion file with a replaceable content, something like the following:&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# type_list=`ytmdl --get-opts`&lt;/span&gt;
&lt;span class="c1"&gt;# Replace the above line with the below line&lt;/span&gt;
&lt;span class="nv"&gt;type_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{{static_opts}}&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you have done that, we can write a simple python script (you can write in whatever language you want) to fill that static variable.&lt;/p&gt;

&lt;p&gt;The idea is to read the contents of the file, find this static variable and replace it with the options and write the output to a file. This final file will be the completion file that can be copied to the necessary directory.&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Lets say the template file is zsh-completion.in&lt;/span&gt;
&lt;span class="c1"&gt;# and the output file is ytmdl.zsh&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;zsh-completion.in&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;FINAL_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ytmdl.zsh&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# string of options seperated by space.&lt;/span&gt;

&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{{static_opts}}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Write the file now&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FINAL_FILE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Above script will fill the &lt;code&gt;{{static_opts}}&lt;/code&gt; with the proper options and then the final file can be copied to the directory.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/ytdl-org/youtube-dl"&gt;youtube-dl&lt;/a&gt; for the idea of dynamic filling using a python script.&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/tab-autocomplet-cli-apps</guid>
      <category>tab</category>
      <category>autocomplete</category>
      <category>commandline</category>
      <category>cli</category>
      <pubDate>Fri, 20 Nov 2020 19:38:47 +0000</pubDate>
    </item>
    <item>
      <title>I created my own blog management system. Here's how I did it.</title>
      <link>https://blog.deepjyoti30.dev/created-own-blog</link>
      <description>&lt;p&gt;I have had a personal blog for a while now. I had written a few posts there but it was far from perfect. It was built using basic HTML, CSS and JS. I had seen all this awesome sites with unique designs and I thought, why not create my own?&lt;/p&gt;

&lt;p&gt;I went with a front-end for back-end approach which means the back-end needed to be robust in order for the content to load properly and fast.&lt;/p&gt;

&lt;p&gt;I built my API using FastAPI for Python and the webapp using VueJS.&lt;/p&gt;

&lt;h1&gt;Building the API&lt;/h1&gt;

&lt;h2&gt;Structering the API&lt;/h2&gt;

&lt;p&gt;I laid down the endpoints that will possibly be needed in order for the blog to work properly.&lt;/p&gt;

&lt;p&gt;Here are some of them&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/posts: Allow GET, POST, UPDATE, DELETE where only GET will be public and other methods would need a secret token in order to access them&lt;/li&gt;
&lt;li&gt;/subscribe: Allow POST, DELETE where only POST will be public.&lt;/li&gt;
&lt;li&gt;/related: Allow GET to get the related posts to a post.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the database, I went with mongoDB. So the idea is to store the posts as markdown in the database and let the API access it. The frontend will then just make a request and get all the data from the API.&lt;/p&gt;

&lt;h2&gt;Implementing the API&lt;/h2&gt;

&lt;p&gt;It took me a few days to get the API ready. FastAPI was really helpful with their openapi docs to provide a nice interface in order to test the API without using &lt;code&gt;curl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The posts and the subscribe endpoint are pretty self explanatory, here's how I created the related endpoint.&lt;/p&gt;

&lt;h2&gt;Finding posts related to a post&lt;/h2&gt;

&lt;p&gt;Since all the posts will have tags linked to them, I used those to calculate a score for the post.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;/related/&amp;lt;post_id&amp;gt;&lt;/code&gt; endpoint was structered to pass a &lt;code&gt;post_id&lt;/code&gt; that would tell us which post to consider the root post. Once we have this post, we can fetch all the other posts and calculate a related score.&lt;/p&gt;

&lt;p&gt;This score is calculated in the following way&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Consider root_tags are tags of the source post&lt;/span&gt;
&lt;span class="c1"&gt;# other_tags are the tags of the other post that.&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root_tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other_tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Remove duplicate tags if present&lt;/span&gt;
    &lt;span class="n"&gt;root_tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root_tags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;other_tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other_tags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Calculate the score now&lt;/span&gt;
    &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root_tags&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other_tags&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root_tags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Above code does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intersect the root tags with the other tags set giving us the common tags&lt;/li&gt;
&lt;li&gt;Score is the division of the number of tags common between the two posts and the total number of tags present in the actual post.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way we get a score that would be between 0 and 1. Once we have this score, we can sort the posts based on the result and the posts that have a higher score are more related to a post as compared to other posts.&lt;/p&gt;

&lt;h1&gt;Building the webapp&lt;/h1&gt;

&lt;p&gt;The webapp is built using VueJS. The whole idea of the frontend for backend approach is, the frontend will be dependent on the backend for the data.&lt;/p&gt;

&lt;h2&gt;Structuering the app&lt;/h2&gt;

&lt;p&gt;Before building the app, I went through a few points that the app should be able to do&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It should have a home page that will show the users all the posts available&lt;/li&gt;
&lt;li&gt;It should be able to show each post&lt;/li&gt;
&lt;li&gt;It should be fast&lt;/li&gt;
&lt;li&gt;It should be able to load posts directly through a route (for example: &lt;code&gt;blog.com/nana&lt;/code&gt; should load the post &lt;code&gt;nana&lt;/code&gt; and not just the webapp that is hosted on &lt;code&gt;blog.com&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first part is pretty simple. I just used the &lt;code&gt;/posts&lt;/code&gt; route in order to get all the posts and then displayed them in a nice way.&lt;/p&gt;

&lt;h2&gt;Rendering the post dynamically&lt;/h2&gt;

&lt;p&gt;Here's the flow of how a post is rendered&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the user clicks on a post from the home page, the content of the post is passed to the router and accordingly rendered in the post view.&lt;/li&gt;
&lt;li&gt;If the post is opened using a route, the route is used to find the post and accordingly the content is shown.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above basically does two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Makes the load speed faster if the user opens a post from the home page&lt;/li&gt;
&lt;li&gt;Adds the ability to load a post using the route.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;To pass the contents of the post by the route, use a route prop to pass a object that will hold the contents. In the Post view, check if this object is available or not, if not use the route to make a request and fetch the content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;What about SEO?&lt;/h2&gt;

&lt;p&gt;Well yeah, I know SEO is important. For loading the meta tags I used &lt;a href="https://github.com/ktquez/vue-head"&gt;vue-head&lt;/a&gt; which renders the meta tags dynamically after the post is loaded using the API.&lt;/p&gt;

&lt;p&gt;This is pretty important since the meta tags are used by all the bots crawling the page. Also, Google bots are now able to crawl dynamically rendered content whcih means it should not be an issue if the tags are loaded dynamically using JS.&lt;/p&gt;

&lt;h1&gt;Problems&lt;/h1&gt;

&lt;p&gt;Except the common occurence of bugs, I did not had any problems with the back end. However there was one issue that made me question the whole idea. How do bots that do not have the ability to crawl dynamically rendered content crawl the page.&lt;/p&gt;

&lt;p&gt;For example, twitter bots crawl a page in order to show a nice card view. If the bots are not able to crawl the page then the card won't be there. Not just Twitter, a similar functionality is used by various other social share bots like the ones from Facebook and LinkedIn.&lt;/p&gt;

&lt;h2&gt;How to let bots crawl the page&lt;/h2&gt;

&lt;p&gt;Well, so how did I fix this issue? At first, I obviously thought this would be inevitable because there's no way the bots would be able to detect dynamically rendered content. One solution was to go with server side rendering but I'm better off not diving down that road.&lt;/p&gt;

&lt;p&gt;So the solution that I went with was to write a static file server in Python.&lt;/p&gt;

&lt;p&gt;What would our server do?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It should be able to return the static html, JS, CSS files.&lt;/li&gt;
&lt;li&gt;It should be able to return a rendered HTML with just the meta tags if the request is made by a bot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I built the server using Flask for Python. It detects the request making entity using the &lt;code&gt;User-Agent&lt;/code&gt; header being passed and accordingly returns an HTML. If the request is being made by a bot, it returns some HTML content that has the meta representing the post.&lt;/p&gt;

&lt;p&gt;Else it returns the proper static files.&lt;/p&gt;

&lt;p&gt;You can read about it &lt;a href="https://blog.deepjyoti30.dev/let-bots-crawl-dynamic-page"&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/created-own-blog</guid>
      <category>webdev</category>
      <category>javascript</category>
      <category>python</category>
      <category>css</category>
      <pubDate>Tue, 17 Nov 2020 21:52:55 +0000</pubDate>
    </item>
    <item>
      <title>Letting bots crawl your dynamically rendered page</title>
      <link>https://blog.deepjyoti30.dev/let-bots-crawl-dynamic-page</link>
      <description>&lt;p&gt;Meta tags are one of the most important aspects of a blog. In the recent years, crawlers such as from Google and Bing etc have advanced a lot, they are able to crawl pages that render content dynamically.&lt;/p&gt;

&lt;p&gt;One important role meta plays is to give the page an identity to all the crawlers from social share sites like Twitter etc. These crawlers are not yet that advanced as to recognize dynamically rendered content.&lt;/p&gt;

&lt;h2&gt;How do they work?&lt;/h2&gt;

&lt;p&gt;Whenever you share a post on Twitter, Facebook etc, you'll see a nice little card showing you the title of the post, some description and the cover image (possibly). Ever wondered how they are able to show that? Yep, they use the meta tags from the posts URL.&lt;/p&gt;

&lt;h2&gt;Techincally, how do they work?&lt;/h2&gt;

&lt;p&gt;All right, let's get a bit technical here, how does it actually get all that data?&lt;/p&gt;

&lt;p&gt;Well, when you share an URL, the crawlers basically send a &lt;strong&gt;GET&lt;/strong&gt; request to that URL and the server sends back the HTML content of the page. Once the page is received, the crawlers extract all the content from it and accordingly you see those data on your Twitter feed.&lt;/p&gt;

&lt;h2&gt;What is dynamic rendering of content&lt;/h2&gt;

&lt;p&gt;Okay, so what is this dynamic rendering I'm talking about? In order to understand how dynamic rendering works, you need to know how the static pages work.&lt;/p&gt;

&lt;h3&gt;What are static pages?&lt;/h3&gt;

&lt;p&gt;So, we call some pages static because, well, they are &lt;strong&gt;static&lt;/strong&gt;. They are just HTML pages that were created by someone and when you try to open them, your browser fetches the HTMl content from that someone's server and shows it to you.&lt;/p&gt;

&lt;p&gt;Now here's the deal, if you want to create a personal blog, can you imagine how tedious it will become to manually keep creating HTML pages for each blog post you write? Well, perhaps you can't but believe me when I say, it becomes a mess real quick.&lt;/p&gt;

&lt;h3&gt;What is dynamic rendering?&lt;/h3&gt;

&lt;p&gt;Well since static pages become a mess, for something like a personal blog, dynamic rendering is very useful. You just store all the blogs etc in the backend and you just have one HTML page (not literally). This page will render the content based on the post that the user wants to read.&lt;/p&gt;

&lt;p&gt;This takes away a lot of the issue of static pages. Like, whenever you feel like creating a new post, just add it to your backend and your frontend will take care of it automatically.&lt;/p&gt;

&lt;p&gt;This is how &lt;strong&gt;this&lt;/strong&gt; blog is also handled (I recently made the move to this new blog page, if you had checked my site before, you'd be aware of the old static page).&lt;/p&gt;

&lt;h2&gt;The problem&lt;/h2&gt;

&lt;p&gt;It's no secret that dynamic rendering is pretty useful. However it brings its own issues. One issue is since the content is rendered dynamically, it means the meta tags are also rendered dynamically.&lt;/p&gt;

&lt;p&gt;But, as I mentioned in the beginning, bots like Twitter do not support that yet. So the problem is how do you make your posts crawlable by bots so that whenever you share it somewhere it shows up real nice and good?&lt;/p&gt;

&lt;h2&gt;The solution&lt;/h2&gt;

&lt;p&gt;After I faced this issue, I started wondering what could be a nice possible solution for this.&lt;/p&gt;

&lt;p&gt;I came across a &lt;a href="https://dev.to/burhanahmeed/dynamic-rendering-simple-solution-for-spa-when-shared-on-social-media-amd"&gt;post on dev.to&lt;/a&gt; that basically said that in order to let bots crawl, we need to use a middleware in our server.&lt;/p&gt;

&lt;p&gt;The above post is basically about creating a static file server in expresss that serves the files from the &lt;code&gt;dist&lt;/code&gt; directory. However, when the request is made by some bot, it loads the page using &lt;a href="https://github.com/puppeteer/puppeteer"&gt;puppeteer&lt;/a&gt; which is basically the selenium equivalent of nodeJS. What is does is using a chromedriver in order to load the page and then returns the content.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The check to see if it is a bot is done by checking the User-Agent header which tells us who is making the request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once the content is recieved from puppeteer, it is returned to the bot that is trying to crawl the page.&lt;/p&gt;

&lt;p&gt;Our solution will be somewhat similar to the above, but in Python. Yep, Python it is.&lt;/p&gt;

&lt;h2&gt;My solution&lt;/h2&gt;

&lt;p&gt;My idea was simple. I need to have a middleware that will do the following&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check if the request is being made by some bot&lt;/li&gt;
&lt;li&gt;If it is, get a skeleton HTML page from my backend that is rendered dynamically and it adds all the necessary meta tags&lt;/li&gt;
&lt;li&gt;Else, return proper index.html&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I made a basic static file server using Flask that does exactly the above. It checks if the user agent is a bot by using the &lt;a href="https://pypi.org/project/user-agents/"&gt;user-agents&lt;/a&gt; library and accordingly returns the content.&lt;/p&gt;

&lt;h3&gt;Implementation&lt;/h3&gt;

&lt;p&gt;I'm not going to dive deep into the second point. What I did in there was to add an endpoint in my API that returns a dynamically rendered HTML that contains all the necessary meta tags.&lt;/p&gt;

&lt;p&gt;Checking the user agent is done in the following code. We will use the &lt;code&gt;user-agents&lt;/code&gt; library to determine if the request is being made by some bot.&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Considering you have registered a flask app&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;lt;slug&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;return_post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# If the user agent is a bot, return just meta&lt;/span&gt;
    &lt;span class="n"&gt;user_agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Check if it is not bot&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;user_agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_bot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;: Returning content for not bot&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;full_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;send_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above code chunk, flask is checking the route &lt;code&gt;/&amp;lt;slug&amp;gt;&lt;/code&gt;. Slug is a string. Since all the posts in my page are in the form of &lt;code&gt;blog.deepjyoti30.dev/&amp;lt;slug&amp;gt;&lt;/code&gt;, it's only necessary to check those posts.&lt;/p&gt;

&lt;p&gt;After that slug is matched, we are parsing the &lt;code&gt;User-Agent&lt;/code&gt; string and checking if it is not a bot. If so, we are returning the &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So we are now set to serve the files to a normal user, what should we do regarding the bots?&lt;/p&gt;

&lt;p&gt;The following code chunk shows what to do if it is a bot.&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="c1"&gt;# Get proper meta and return&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_rendered_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;: Returning content for bot.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;full_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above code is pretty self explanatory. If the one making the request is a bot then we get the rendered html using the slug and accordingly return that.&lt;/p&gt;

&lt;p&gt;This way the social share bots will be able to go through the content and accordingly show the image cover etc.&lt;/p&gt;

&lt;p&gt;Now, the above code becomes the following&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Considering you have registered a flask app&lt;/span&gt;
&lt;span class="c1"&gt;# Check the flask docs to know how to do that&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;lt;slug&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;return_post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# If the user agent is a bot, return just meta&lt;/span&gt;
    &lt;span class="n"&gt;user_agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Check if it is not bot&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;user_agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_bot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;: Returning content for not bot&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;full_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;send_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Get proper meta and return&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_rendered_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;: Returning content for bot.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;full_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above is code for serving the basic index.html. You will need to specifically serve other files as well such as js, css etc. One way of doing those is by the following:&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Serve the img directory&lt;/span&gt;
&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/img/&amp;lt;path:file&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_img&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;full_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;send_from_directory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dist&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;joinpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will have to do something like above for other directories as well, like the js directory as well as teh css directory and other files.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For production, use a WSGI http server like &lt;a href="https://gunicorn.org/"&gt;gunicorn&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Dynamic rendering is fun and really usefull, however it has it's own caveats. All in all, it is still worth it since the issues are not that big a deal. You can try out the above code in action in the following way.&lt;/p&gt;

&lt;p&gt;Let's take this post as an example: &lt;code&gt;https://blog.deepjyoti30.dev/using-mongo-with-heroku&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make a GET request using a proper User-Agent in the following way.&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;curl https://blog.deepjyoti30.dev/using-mongo-with-heroku \&lt;/span&gt;
&lt;span class="go"&gt;    -H &amp;quot;User-Agent: Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit53519&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you have a proper internet connection, you'll see some minimal JS related code. This means the request was recognized as being from a user and not a bot.&lt;/p&gt;

&lt;p&gt;Let's now try to imitate a bot in the following way:&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;curl https://blog.deepjyoti30.dev/using-mongo-with-heroku \&lt;/span&gt;
&lt;span class="go"&gt;    -H &amp;quot;User-Agent: just-a-bot&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should now get some HTML content. This clearly shows the request was recognized as being from a bot and thus some HTML content was returned with proper metadata.&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/let-bots-crawl-dynamic-page</guid>
      <category>meta</category>
      <category>dynamic</category>
      <category>rendered</category>
      <category>page</category>
      <pubDate>Fri, 13 Nov 2020 17:47:45 +0000</pubDate>
    </item>
    <item>
      <title>Getting started with using MongoDB with free Heroku account</title>
      <link>https://blog.deepjyoti30.dev/using-mongo-with-heroku</link>
      <description>&lt;p&gt;I have been running away from using a proper Database for my personal page for a while. I thought it would be a lot of hassle considering that my backend is present on Heroku and the frontend is hosted using Github Pages, I was wrong.&lt;/p&gt;

&lt;p&gt;I recently was working on a project with some of my friends, it was for a Hackathon I participated in. In that, I came through a problem of using a database in order to store the data of the users. I initially did not put much thought on it, however people suggested that I use a graph database for that problem, it would blend in perfectly for my situation.&lt;/p&gt;

&lt;p&gt;I put some thought on it and researched a bit. I ended up using neo4j as my backends graphDB. Surprisingly, the process to use it was really simple and as usual I used it with Heroku (I might write about that later in a different post).&lt;/p&gt;

&lt;p&gt;So now I thought, why not use a database for my personal page as well. I had time and I thought it would be better if I would do that since I'm also thinking about moving away from github pages and buying my own domain (not sure).&lt;/p&gt;

&lt;p&gt;So that's that, I finally made the move to a DB. As of today, all the endpoints are working with the newly implemented logic to work with the database. As usual I thought why not write a blog about it.&lt;/p&gt;

&lt;h2&gt;How it works&lt;/h2&gt;

&lt;p&gt;In order to host a database, Heroku uses MongoDB's &lt;a href="https://mlab.com/"&gt;mLab&lt;/a&gt;. It is actually a cloud service provided by MongoDB themselves that allows users to create databases in the cloud and users can connect to them using the URL provided by them.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We will have our backend code hosted on Heroku and our database hosted on some server handled by mLab.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Usually if a person wants to use a database on their &lt;em&gt;own&lt;/em&gt; server, than the server can be installed locally and then run on a port and the code that will interact with the server will connect to this local port.This is almost similar to using our own server with the difference that the database will be handled by mLab.&lt;/p&gt;

&lt;p&gt;So to conclude, we will have our backend code hosted on Heroku and our database hosted on some server handled by mLab. Our code present on Heroku will interact with the database present in mLab's servers through their URL and write or read documents.&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;First things first, make sure you have a app created on Heroku where all the backend code will go. Once that's ready we can run one command to install the add on on to the app.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;heroku addons:create mongolab&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Alternately it can also be added through the &lt;a href="https://elements.heroku.com/addons/mongolab"&gt;add-on catalog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After the app is added, get the URL that will be used to connect to the mongoDB database. It can be get by the following command.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;heroku config:get MONGODB_URI&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;What happens is, once the app is added, Heroku creates a new database for you and the URL to connect to that database is added as a environmet variable that can be fetched by the above command.&lt;/p&gt;

&lt;p&gt;Once this is done, you can go to &lt;strong&gt;mLab&lt;/strong&gt; and created databases, collections, users etc everything right from there.&lt;/p&gt;

&lt;p&gt;Now that we have the database set up, how do we talk with the database in order to store our data. So that can be done by various. You can install &lt;strong&gt;mongodb-shell&lt;/strong&gt; in order to be able to connect to the database from your local terminal.&lt;/p&gt;

&lt;p&gt;The preferred way to interact is obviously a language. I like to use Python, however MongoDB has drivers for a lot of languages and a lot of documentation is also available for each one of them.&lt;/p&gt;

&lt;p&gt;For Python the module is &lt;strong&gt;pymongo&lt;/strong&gt; that is available in &lt;a href="https://pypi.org/project/pymongo/"&gt;PyPi&lt;/a&gt; and is pretty straightforward to use. I used this module for all the stuff I'm doing in order to connect to the remote database.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Thats it people, it's that simple to setup and use mongoDB from Heroku and I was seriously blown away by how simple it is.&lt;/p&gt;

&lt;p&gt;However, while storing data take precautions. Try to follow best practices in order to keep your database secure. As I read in one Stackoverflow answer, if we make a different user that has access to just one collection (tables are collections in MongoDB), even it's better than not having any security and just using the root user to connect.&lt;/p&gt;

&lt;p&gt;Also try to refer to the official docs as the methods, classes keep changing with updates. I myself faced an issue because I was trying to connect' and write to the database in a method that was depreciated, so try to always read the docs and follow those rather than following some random article.&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/using-mongo-with-heroku</guid>
      <category>heroku</category>
      <category>database</category>
      <category>mongodb</category>
      <category>mlab</category>
      <pubDate>Mon, 11 May 2020 05:30:00 +0000</pubDate>
    </item>
    <item>
      <title>Using Spotify with ncmpcpp and Mopidy in Linux</title>
      <link>https://blog.deepjyoti30.dev/using-spotify-with-ncmpcpp-mopidy-linux</link>
      <description>&lt;p&gt;Back when I started using Linux, I really built a liking for ncmpcpp. However, that was when I mostly used to listen to songs that are stored locally on my machine. After a few months, I started using Spotify and so I had to stop using ncmpcpp because I did not have a Spotify Premium account to use with ncmpcpp.&lt;/p&gt;

&lt;p&gt;I have a Premium account now and I was restlessly looking for a CLI based Spotify client when I found a comment mentioning &lt;strong&gt;ncmpcpp with mopidy-spotify&lt;/strong&gt; and my memory hit back at once. We can use ncmpcpp with Spotify, here's how to do it properly.&lt;/p&gt;

&lt;h2&gt;Requirements&lt;/h2&gt;

&lt;p&gt;We will need to install a few apps in order to use Spotify.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ncmpcpp/ncmpcpp"&gt;ncmpcpp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mopidy/mopidy"&gt;mopidy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mopidy/mopidy-spotify"&gt;mopidy-spotify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above apps can be found in the respective app stores. In my case I used AUR and PyPI to get them. Check installation instructions in the GitHub pages.&lt;/p&gt;

&lt;h3&gt;ncmpcpp&lt;/h3&gt;

&lt;p&gt;ncmpcpp is a frontend for MPD (Music Player Daemon) and it's a fork of ncmpc but it's better in many ways than ncmpc and offers a lot of extra features.&lt;/p&gt;

&lt;h3&gt;mopidy&lt;/h3&gt;

&lt;p&gt;Mopidy is an extensible music server which is written in Python but the good thing is it also supports MPD clients, thus we can use it with ncmpcpp&lt;/p&gt;

&lt;h3&gt;mopidy-spotify&lt;/h3&gt;

&lt;p&gt;mopidy-spotify is just an extension of mopidy which lets us use Spotify with Mopidy given we have a Premium Spotify account. A Premium account is required because Spotify puts restrictions in their API for free accounts. Thus free accounts cannot get proper access of all the Spotify endpoints.&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;We need to use all the above apps so install them before going along with this article.&lt;/p&gt;

&lt;p&gt;Here's how we will get it to work. We will use Mopidy along with Mopidy Spotify to get our Spotify data and play songs etc. So we have our backend ready. Once that's done, we will configure ncmpcpp to work with mopidy in order to make our frontend work as well. So we have our frontend ready as well.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/process_spotify_cli.jpg" alt="How Spotify CLI works with Mopidy" /&gt;&lt;/p&gt;

&lt;p&gt;The above image sums it up nicely. How the whole thing is going to work.&lt;/p&gt;

&lt;p&gt;Once the installation is done, we will have to configure ncmpcpp, and mopidy. Each one of them has a config file that will be used while the app runs. This config files are important in order to make sure everthing works. Please follow the steps properly.&lt;/p&gt;

&lt;h2&gt;Setting up Mopidy&lt;/h2&gt;

&lt;p&gt;The mopidy config is stored in the &lt;strong&gt;~/.config/mopidy&lt;/strong&gt; directory. The name of the config is &lt;strong&gt;mopidy.conf&lt;/strong&gt;. Here's the mopidy.conf&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;restore_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mpd&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6600&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spotify&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;your_username&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;your_pw&lt;/span&gt;
&lt;span class="n"&gt;client_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;your_client_id&lt;/span&gt;
&lt;span class="n"&gt;client_secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;your_client_secret&lt;/span&gt;
&lt;span class="n"&gt;bitrate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;320&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The client_id and secret can be fetched from &lt;a href="https://mopidy.com/ext/spotify/"&gt;here&lt;/a&gt;. Put the values you get in the config file above.&lt;/p&gt;

&lt;p&gt;Put your Spotify &lt;strong&gt;username&lt;/strong&gt; and &lt;strong&gt;password&lt;/strong&gt; above as well.&lt;/p&gt;

&lt;p&gt;The MPD section takes the values &lt;strong&gt;hostname&lt;/strong&gt; and &lt;strong&gt;port&lt;/strong&gt;. The default value of hostname is &lt;strong&gt;127.0.0.1&lt;/strong&gt; and port is &lt;strong&gt;6600&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Note that we need to keep the hostname and port same through all the files in order for them to work together. It's simple how they'll work. Mopidy will serve the data in the hostname and port we specify and ncmpcpp will read the data from them, thus we need to keep em same throughout all the config files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;enabled&lt;/strong&gt; option tells mopidy if the current extension is enabled or not. The default values are &lt;strong&gt;false&lt;/strong&gt;. So we need to change them in order to tell mopidy that we want to use mopidy-spotify.&lt;/p&gt;

&lt;h2&gt;Setting up ncmpcpp&lt;/h2&gt;

&lt;p&gt;The ncmpcpp config is stored in the &lt;strong&gt;~/.config/ncmpcpp&lt;/strong&gt; directory. The name of the file &lt;strong&gt;config&lt;/strong&gt;. Only three values would suffice to get it up and running.&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;mpd_host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;mpd_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6600&lt;/span&gt;
&lt;span class="n"&gt;mpd_music_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Music&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As I mentioned earlier, the host and port need to be the same in this config as well. The &lt;strong&gt;mpd_music_dir&lt;/strong&gt; is required by ncmpcpp.&lt;/p&gt;

&lt;p&gt;A sample configuration file is provided by ncmpcpp. It can be copied from &lt;strong&gt;/usr/share/doc/ncmpcpp/config&lt;/strong&gt; to the config directory. This file would have a proper explanation of all the possible values along with other information. Check the &lt;a href="https://wiki.archlinux.org/index.php/Ncmpcpp"&gt;wiki&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h2&gt;Using ncmpcpp&lt;/h2&gt;

&lt;p&gt;Once the above configurations are done, we are good to start using Spotify from the CLI. Just run &lt;strong&gt;mopidy&lt;/strong&gt; in order to start the daemon/backend.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/ncmpcpp_playlist.jpg" alt="ncmpcpp playlist window" /&gt;&lt;/p&gt;

&lt;p&gt;Once mopidy is running, open ncmpcpp in another window or push mopidy to background and open in the same window. You might see an empty window, this would probably because ncmpcpp loads up by default the now playing screen and since we haven't played anything yet, it would be empty.&lt;/p&gt;

&lt;p&gt;Click the number &lt;strong&gt;2&lt;/strong&gt; and you'll see all your playlists, play some playlists and you should be good to go. Check the &lt;a href="https://pkgbuild.com/~jelle/ncmpcpp/"&gt;cheatsheet&lt;/a&gt; for more.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I've using this setup for about a week now and so far I haven't faced any issues. Feel free to DM me with your querries.&lt;/em&gt;&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/using-spotify-with-ncmpcpp-mopidy-linux</guid>
      <category>linux</category>
      <category>commandline</category>
      <category>spotify</category>
      <category>cli</category>
      <pubDate>Thu, 16 Apr 2020 05:30:00 +0000</pubDate>
    </item>
    <item>
      <title>Getting started with web scraping in Python</title>
      <link>https://blog.deepjyoti30.dev/getting-started-with-web-scraping-in-python</link>
      <description>&lt;p&gt;Every now and then a developer comes up with an idea, an app that would yield awesome results. The idea sounds pretty good, the plan theoretically sounds foolproof, however the developer gets stuck while developing the app because it's supposed to be dependent on another app, a famous app and the developer thought they would use the famous apps API. It seems the famous app doesn't have an API and if it has one, it allows limited access. The idea is dead.&lt;/p&gt;

&lt;h2&gt;Web scraping&lt;/h2&gt;

&lt;p&gt;If you do a simple Google search about Web Scraping, it'll lead you to the wiki page of Web Scraping, which notes that web scraping started way back in 1993. Even though back then, and even now, these scrapers were used to collect data from the sites, our aim would be a bit different. We don't want to collect all kinds of data but only the data that would benefit us.&lt;/p&gt;

&lt;p&gt;I am not going to talk about the advantages of scraping the web or anything and neither am I encouraging anyone to scrap the web like anything. This will be just a simple tutorial focused on beginners who have just taken their baby steps in the world of Python and want to do something great. That doesn't mean this can't be referred by experienced people, just that they'll end up judging me as to why I am spoon feeding everything to the beginners.&lt;/p&gt;

&lt;p&gt;For the sake of this article, we'll take the example of building a simple API for billboard that returns chart data based on the passed chart name.&lt;/p&gt;

&lt;h2&gt;The Process&lt;/h2&gt;

&lt;p&gt;The process can be broken down into 3 steps&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Research&lt;/li&gt;
&lt;li&gt;Implementing&lt;/li&gt;
&lt;li&gt;Checking all cases&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Research&lt;/h2&gt;

&lt;p&gt;Research can be considered the most important part. For the kind of scraper we are writing, it's really important to check the sources of the page and properly find div's that can be filtered out using their class names or id names.&lt;/p&gt;

&lt;p&gt;It is assumed that basic knowledge of HTML is present in the reader. Most pages use div's to create sections except some pages like YouTube that use their own elements in HTML. However, once the understanding of elements is present, it becomes pretty straightforward.&lt;/p&gt;

&lt;p&gt;So just fire up the URL you want to scrap on your preferred browser. I use Chrome for doing that but Firefox and Safari should behave similarly. Once the page is opened, open the developer tools by either the three dot menu on top right or by the Ctrl+Shift+I&lt;/p&gt;

&lt;p&gt;Once the developer tools is open, go to the elements tab and start looking at the source code. It won't make much sense and by default all the outermost elements will be visible.&lt;/p&gt;

&lt;p&gt;So browsers have this neat feature that if we hover the cursor on top of some element, the element lights up in the page.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/cursor_hover_effect.jpg" alt="Cursor hover effect chrome" /&gt; Element lights up on mouse hover&lt;/p&gt;

&lt;p&gt;Once you figure out how to use this feature, dive into the code. Go to the part of the page, the data that you want from the page. After that start hovering on elements and get to the inner most element that actually contains the data.&lt;/p&gt;

&lt;p&gt;Let's see which element contains the chart name.&lt;/p&gt;

&lt;p&gt;So probably the element containing the chart name is somewhere inside the main element. Click on it and open it. Go through all the elements untill you find the element that's containing the chart name exactly. This is the element we are going to use to extract the name of the chart.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/chart_name.jpg" alt="Chart Name element" /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have the element containing the name of the chart, let's try to see if the class name of this element is unique.&lt;/p&gt;

&lt;h2&gt;Implementing&lt;/h2&gt;

&lt;p&gt;We will use 3 tools to implement the scraper. There are a plethora of tools available to scrap webpages. Some tools are better than others and some are simpler than others. I like to go with the simple ones and so stick to these tools for eveything.&lt;/p&gt;

&lt;p&gt;The tools I use are&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://requests.readthedocs.io/en/master/"&gt;requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/beautifulsoup4/"&gt;beautifulsoup4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/re.html"&gt;regex&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We will need requests to get the page data. beautifulsoup4 or bs4 for formatting the data into something meaningful and regex or re to find out particular things from the data.&lt;/p&gt;

&lt;p&gt;Once we have the tools installed, for all testing purposes rather than writing the script, open the python interpreter on Terminal by typing python. Once you are in Python, import all the modules.&lt;/p&gt;

&lt;p&gt;After we have the modules, we will requests to make a get request and get the data and then pass the data ot BeautifulSoup to parse it. The process of extracting the exact data varies. I can't explain each and every step right now, take a look at the code below.&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;  &lt;span class="c1"&gt;# To get the page data&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;  &lt;span class="c1"&gt;# To parse the data&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;   &lt;span class="c1"&gt;# To extract certain things&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://www.billboard.com/charts/pop-songs&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Get the page data&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Response is just an instance and the actual data&lt;/span&gt;
&lt;span class="c1"&gt;# is present in response.text or response.content&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="c1"&gt;# Now pass the data to BeautifulSoup for it to parse it&lt;/span&gt;
&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;html.parser&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# The chart name is present in an h1 tag&lt;/span&gt;
&lt;span class="c1"&gt;# with the class chart-detail-header__chart-name&lt;/span&gt;
&lt;span class="c1"&gt;# We can use the findAll method of bs4 to find all the occurences&lt;/span&gt;
&lt;span class="c1"&gt;# of this class&lt;/span&gt;
&lt;span class="n"&gt;temp_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;h1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;chart-detail-header__chart-name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt; found&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Above script, when run outputs the following result.&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# ------OUTPUT---------&lt;/span&gt;
&lt;span class="c1"&gt;# 1 found&lt;/span&gt;
&lt;span class="c1"&gt;# [&amp;lt;h1 class=&amp;quot;chart-detail-header__chart-name&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# POP SONGS&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;/h1&amp;gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we look closely, the output is a list with just one match which contains the h1 div we checked and it has the name of the chart inside the element.&lt;/p&gt;

&lt;p&gt;Now, the problem we have is we need to extract the name from inside the element. How to do that? Yup, we will use regex to get the name.&lt;/p&gt;

&lt;p&gt;First things first, if you check the output properly, you'll notice that after the 1 found line, there are 3 lines, which means there are &lt;code&gt;\n&lt;/code&gt; in between them. Even if there won't be any, it's always good to try remove them.&lt;/p&gt;

&lt;p&gt;re has all kinds of functions for this. We can use the &lt;code&gt;sub()&lt;/code&gt; method for that.&lt;/p&gt;

&lt;p&gt;If we look at the &lt;code&gt;temp_name&lt;/code&gt; variable closely, we'll see that the name of the chart is present between &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;(less than) /&lt;/code&gt; tags.&lt;/p&gt;

&lt;p&gt;NOTE: I used less than above because HTML doesn't allow writing that tag without screwing up something.&lt;/p&gt;

&lt;p&gt;So now, we can use a regex method to filter out anything that's between those two characters. &lt;br /&gt;
&lt;code&gt;re.findall(r'img alt=".*?"', str(temp_name))&lt;/code&gt; &lt;br /&gt;
This will return a list containing all the matches of the above pattern.&lt;/p&gt;

&lt;p&gt;After we get the above result, we'll some more patter matching to extract the final output. Look at the following code sample for that.&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# This code should be written after the above code.&lt;/span&gt;
&lt;span class="c1"&gt;# We have the element containng the name in the &lt;/span&gt;
&lt;span class="c1"&gt;# temp_name variable.&lt;/span&gt;

&lt;span class="c1"&gt;# temp_name is currently a list containing all the&lt;/span&gt;
&lt;span class="c1"&gt;# matches, let&amp;#39;s get the string out of it.&lt;/span&gt;
&lt;span class="n"&gt;temp_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp_name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Replace all \n in the temp_name string&lt;/span&gt;
&lt;span class="n"&gt;temp_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# Once we have the string without any newline tags&lt;/span&gt;
&lt;span class="c1"&gt;# Try to match the pattern&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# The name is between the &amp;gt; and &amp;lt;/ chars&lt;/span&gt;
&lt;span class="n"&gt;temp_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;.*?&amp;lt;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Now we will have a list with the value&lt;/span&gt;
&lt;span class="c1"&gt;# [&amp;#39;&amp;gt;POP SONGS&amp;lt;/&amp;#39;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Need to remove those remaining tags now&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[&amp;gt;&amp;lt;/]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp_name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Chart name is: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Above code will return the name after operating on it. Since the patter of each element containing the name will be same, we can use this logic for any chart URL passed.&lt;/p&gt;

&lt;p&gt;Running the whole code, we get the following code.&lt;/p&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 1 found&lt;/span&gt;
&lt;span class="c1"&gt;# [&amp;lt;h1 class=&amp;quot;chart-detail-header__chart-name&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# POP SONGS&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;/h1&amp;gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# [&amp;#39;&amp;gt;POP SONGS&amp;lt;/&amp;#39;]&lt;/span&gt;
&lt;span class="c1"&gt;# Chart name is: POP SONGS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So we have extracted the chart name. Now what? We can go on and try to extract song names as well from the chart.&lt;/p&gt;

&lt;h2&gt;Checking all cases&lt;/h2&gt;

&lt;p&gt;This is probably a step that can be skipped but be ready to face some bugs. Especially if an API or a large code based app is being built then it's better not to skip this step.&lt;/p&gt;

&lt;p&gt;It is about checking for those cases that might end up giving us errors. For eg: In some charts like the pop-songs chart, the first song is a large div and all the other ones are present in a list. So if we extract the list then we will skip the first song. Thus we need to make sure we look for all the possible cases.&lt;/p&gt;

&lt;p&gt;There is no more to this step. It is a step that will take time to master considering the ability of a person to grasp things and so if the other two steps are understood, this is not really that important for beginners.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So that's it guys. I finally wrote a how to for web scraping. It's a powerfull skill. I have used it many of my projects, including some pretty large ones. It's also usefull when you don't want to look through a hell lot of API docs of apps like YouTube.&lt;/p&gt;

&lt;p&gt;Also, for referral, the source code of my billboard API (simple one) can be found &lt;a href="https://github.com/deepjyoti30/billboardpy"&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/getting-started-with-web-scraping-in-python</guid>
      <category>python</category>
      <category>web</category>
      <category>page</category>
      <category>scraping</category>
      <pubDate>Sat, 28 Mar 2020 05:30:00 +0000</pubDate>
    </item>
    <item>
      <title>Using Heroku as a server for your static page</title>
      <link>https://blog.deepjyoti30.dev/Using-Heroku-as-a-server-for-your-static-page</link>
      <description>&lt;p&gt;As you can see, I have my page hosted on github.io domain which probably means it's a static page. But if you scroll down to the end, you'll see a clap icon which probably is not static. The clap icon is, in fact, dynamic and it works by communicating with my server. But wait a minute, isn't this page static? Yes it is.&lt;/p&gt;

&lt;p&gt;I have had a lot of people complain to me about not habing the proper resources like a domain name or a server to host a page, otherwise, they are &lt;em&gt;confident&lt;/em&gt; they would have a million dollar poge. As ironical that sentence is in itself, this post is not about my people nagging me about not having a page, it's about how to not being one.&lt;/p&gt;

&lt;p&gt;I feel like the only thing that make these people say things like that is because of them being not aware about the resources that are available for free and that can be used to do whatever they want. Yes, ofcourse, these &lt;em&gt;free&lt;/em&gt; resources have their own disadvantages but then again, it's &lt;em&gt;free&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Why and How Heroku&lt;/h2&gt;

&lt;p&gt;Before I get to why to use Heroku, let's see why do we need to use a server at all. &lt;br /&gt;
So a server lets us communicate with it and it and let's us make our page dynamic. That is the content is not &lt;em&gt;hardcoded&lt;/em&gt;, instead it is loaded by asking the server to give us the latest data (or whatever filter you want to use).&lt;/p&gt;

&lt;p&gt;Now the thing is how do frontend communicate with the backend? How do your page ask your server to return you some particular data? Well, simply by using a means to communicate which in this case is an API.&lt;/p&gt;

&lt;p&gt;Now here's the deal, if you can somehow deploy an API on heroku then we can simply make the requests to that API and in return we will get our data. So there we go, this is probably why we will use Heroku to act as our server.&lt;/p&gt;

&lt;p&gt;Now the how part. Well the how is simple. Just learn to write an API in any language you want. I have my API written in Python and then all you have to do is create a new app in Heroku and deploy your app there.&lt;/p&gt;

&lt;p&gt;Yes, it is as simple as that. Well, API writing part might be a bit hard considering your experience with API but anyway, that's it. I have written an &lt;a href="https://deepjyoti30.github.io/blog/have-a-personal-page-for-free"&gt;article&lt;/a&gt; before on how to do that exactly. And &lt;a href="https://www.codementor.io/sagaragarwal94/building-a-basic-restful-api-in-python-58k02xsiq"&gt;here's&lt;/a&gt; the article I referred to build my API.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/frontend_backend.jpg" alt="My laptop" /&gt;&lt;/p&gt;

&lt;p&gt;Once the API is ready and tests are done, it can be deployed very easily to Heroku. The process might differ depending on the languages. However for Python, all it takes is a Procfile where we need to add the command that will run once the app is pushed and that's that.&lt;/p&gt;

&lt;p&gt;After that all the requests can be made to the "appname".herokuapp.com/"endpoint".&lt;/p&gt;

&lt;h2&gt;What's the catch&lt;/h2&gt;

&lt;p&gt;Now that I have showed how simple it is to deploy to Heroku, I really need to describe what the catch is and how to fix that.&lt;/p&gt;

&lt;p&gt;Well, Heroku has an ephemeral filesystem. Every dyno in Heroku has it's own filesystem.&lt;/p&gt;

&lt;p&gt;This means that your data can't be stored in Heroku. This is simply because they have a sleep policy which makes sure each dyno (call it server) sleeps for 1 hour in every 24 hours. But that's not even the actual issue. The issue is after that 1 hour is complete, your app is probably deployed in some other dyno and as I mentioned above, each dyno has their own filesystem, so the new dyno will not have the data that was stored in the older dyno.&lt;/p&gt;

&lt;p&gt;This is critical to our API. If you remember, I have a clap function that keeps track of the claps of any post. But with a filesystem like that, that won't be possible. I didn't even know that was the case untill I started facing issues with my clap related data and other data, so I started researching a bit and found out about the above issue.&lt;/p&gt;

&lt;h2&gt;What's the solution?&lt;/h2&gt;

&lt;p&gt;Well, it's simple. Use a static storage service like aws s3.&lt;/p&gt;

&lt;p&gt;This becomes a bit resource hungry for the API but overall, we can't help it. So what we do is we store all the data in s3 and when our API is supposed to work on it, it just downloads that data from s3 and works on it and then returns the results.&lt;/p&gt;

&lt;p&gt;I personally use s3 along with Heroku and so far I can say it's pretty good. No, there are no catches in using s3.&lt;/p&gt;

&lt;p&gt;For those wondering, I am still on my free trial with AWS and so s3 is free for me. But don't feel like you'll have to use s3. There are probably a lot of alternatives to it and those can be simply used along with Heroku.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So to sum up, you can use Heroku as a server pretty easily. It's like the perfect solution to use along with a static page. It's free. The only disadvantage with using Heroku is it's ephemeral filesystem which can be fixed by using some static storage service like s3.&lt;/p&gt;

&lt;p&gt;There we go, use the above technologies and you'll have a so-called &lt;em&gt;server&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I did not write this particularly for those people who come and tell me they don't have enough resources to have a page, but for those who are starting with web development. I just don't want beginners to go through what I went through when I was setting up my page and I wanted it to be free. But I have to say, whenever they do fuss next time, I'll surely send them this article and block them probably.&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/Using-Heroku-as-a-server-for-your-static-page</guid>
      <category>heroku</category>
      <category>s3</category>
      <category>aws</category>
      <category>server</category>
      <pubDate>Thu, 26 Mar 2020 05:30:00 +0000</pubDate>
    </item>
    <item>
      <title>Owning a Mechanical Keyboard for the first time</title>
      <link>https://blog.deepjyoti30.dev/owning-a-mechanical-keyboard-for-the-first-time</link>
      <description>&lt;p&gt;It was around this time last month when I was just scrolling through YouTube and I came across a video that was about Mechanical Keyboards. So, I ended up wondering what's all the hype about. I remember &lt;a href="https://www.reddit.com/r/unixporn/comments/a900p7/awesome_mechanical_love/"&gt;that&lt;/a&gt; post from Unixporn that got so much love from the community.&lt;/p&gt;

&lt;p&gt;After lurking around the r/MechanicalKeyboards subreddit, I figured that there are so many options to decide from. I initially thought that these keyboards are supposed to be built manually but turns out there are many prebuilt options and they aren't even that costly.&lt;/p&gt;

&lt;p&gt;For the prebuilt ones, options are available depending on the size and the switches used.&lt;/p&gt;

&lt;h2&gt;Deciding a switch&lt;/h2&gt;

&lt;p&gt;I started doing a bit of research, my first place to search for information being &lt;strong&gt;r/MechanicalKeyboards&lt;/strong&gt;. I learned that their are different types of switches to choose from depending on what we do with the Keyboard (gaming/typing). I checked &lt;a href="https://www.youtube.com/watch?v=B6LOmc6A5K4&amp;amp;t=143s"&gt;this&lt;/a&gt; YouTube video that explained pretty nicely about different kinds of switches.&lt;/p&gt;

&lt;p&gt;I decided to go with the Cherry MX blue ones. I don't play games and my keyboard is primaryly used for typing. My current linux setup is based on i3-gaps which makes me dependent on the keyboard a bit more than usual. I can pretty easily say that I use my trackpad/mouse only for scrolling and selecting things to copy. Otherwise I can use my setup completely without using a mouse.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/mx_blue.jpg" alt="" /&gt; Cherry MX Blue on my Akko 3068&lt;/p&gt;

&lt;h2&gt;Deciding a size&lt;/h2&gt;

&lt;p&gt;So the basic sizes that these keyboards come in are 65%, 60% and TKL. &lt;br /&gt;
TKL just stands for Ten Key Less which means it has ten keys less than the usual full sized keyboards. 65% are 65% size of the full sized ones and 60% are 60% of the full sized. The most important difference between 65% and 60% is the inclusion of the dedicated arrow keys.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/tkl_kb.jpg" alt="" /&gt; &lt;a href="https://www.reddit.com/r/MechanicalKeyboards/comments/fjcra1/finished_my_mysterium_tkl_kit/"&gt;u/elevision on Reddit • TKL keyboard, custom build&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I thought, I've used these full sized ones before and the smaller ones look kind of good. But I knew I couldn't live without those arrow keys since I use them on a daily basis, way too much, so I decided to go with the 65% ones.&lt;/p&gt;

&lt;p&gt;After searching for a lot of options with what I wanted, I ended up choosing the Keychron K2 and the Akko 3068. Akko, eventually, had a deal with Ducky (pretty famous brand for mech Keyboards) but it ended around May last year (not sure). As it turns out, Keychron K2 was not available here in India and the only option was importing it from US using Amazon. Amazon does assure a delivery within 3 days but they charge 5k for it which is not cool considering the keyboard itself costs 8k.&lt;/p&gt;

&lt;p&gt;Another option was Banggood. They had Akko 3068 and they were charging just around 200 for delivering it to India from China but it would take time. I went with Banggood since I didn't need the keyboard instanly and I had time. So I placed the order and had to wait a month to get it delivered (it got delayed because of COVID-19 issues).&lt;/p&gt;

&lt;h2&gt;Experince of owning a mech&lt;/h2&gt;

&lt;p&gt;So far it's pretty good. After I opened it up, it turned out to be smaller than I had expected but what can you expect from a 68 key keyboard. The keyboard is also pretty heavy, the parcel weighed 1.67 Kgs. The keys are pretty clicky.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/whole_kb.jpg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I have to say the best thing is the sound of the keys, it's just so awesome typing on it. It feels like I'm using a typewriter. Really excited to use it at college where there'd be people around, LOL.&lt;/p&gt;

&lt;p&gt;It doesn't have RGB, but it does have some LED's that indicate if the keyboard is charging or if the Caps Lock is on etc. Also seems like the left control button is a bit too far away, I am considering remapping it with the Windows key, which honestly I have no use of. Also the keyboards comes with three different colors of some specific keys like the arrow ones and the space and the enter keys.&lt;/p&gt;

&lt;p&gt;Overall experience is pretty good. I love the fact that the keyboard is so customizable, don't like a keycap color? Change it. Don't like a button being too far away? Remap it. Want lights? Add them (it ain't that easy though, especially for newbies like me.) TaeKeyboards does do that though in his &lt;a href="https://www.youtube.com/watch?v=eD5F-VEqLp8&amp;amp;t=422s"&gt;review&lt;/a&gt; of the Akko 3068.&lt;/p&gt;

&lt;p&gt;Another thing, it does increase typing speed. I don't know if it actually helps or not but since I got it, I have been typing pretty fast and it's really awesome.&lt;/p&gt;

&lt;p&gt;I got it for 7k (with offers) though the actual cost was 8k, but totally worth the price. Can say that this and the Keychron K2 are the best budget 65% mech keyboards anyone can get at the moment.&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/owning-a-mechanical-keyboard-for-the-first-time</guid>
      <category>mechanical</category>
      <category>keyboard</category>
      <category>personal</category>
      <category>akko</category>
      <pubDate>Thu, 19 Mar 2020 05:30:00 +0000</pubDate>
    </item>
    <item>
      <title>4 lesser known free comment hosting services better than Disqus</title>
      <link>https://blog.deepjyoti30.dev/4-lesser-known-free-comment-hosting-services-better-than-Disqus</link>
      <description>&lt;p&gt;A few days ago I was developing a page for a client and one of the requirements was having a comment section in the blog posts, which made me wonder, how should I go about implementing a comment hosting service.&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;did&lt;/em&gt; brainstorm for a while about implementing it on my own but then I had that feeling it would take some time because a lot of things would have to be taken into consideration like anonymous comments, nested comments etc.&lt;/p&gt;

&lt;p&gt;As I am, I ended up looking for open source comment hosting services. First I wondered around the likes of Disqus and spot.im and then I started looking for open source alternatives. I was surprised by the amount of open source software available just for that.&lt;/p&gt;

&lt;p&gt;Sergey Lisakov &lt;em&gt;eventually&lt;/em&gt; has a whole &lt;a href="https://lisakov.com/projects/open-source-comments/"&gt;page&lt;/a&gt; for just that. I have to say this page has it all, each and every open source comment hosting service and we can sort them by a lot of different categories. It's exaggerating in a way, like, which one should I use.&lt;/p&gt;

&lt;p&gt;After a whole lot of &lt;em&gt;Let me try this&lt;/em&gt; and &lt;em&gt;I swear this would be the last one&lt;/em&gt;, I finally zeroed down on 4 of them which I think are the best ones.&lt;/p&gt;

&lt;h2&gt;&lt;a href="https://github.com/posativ/isso"&gt;Isso&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This one has to be the one that offers the most features. Besides of that, it's written in Python which I'm &lt;em&gt;not&lt;/em&gt; shy to admit, made me lean towards it a bit more.&lt;/p&gt;

&lt;p&gt;Also, it is the only one with almost 4k stars on GitHub which is a big deal.&lt;/p&gt;

&lt;p&gt;The only issue I have with this, which is also the reason I'm not using it currently is because it requires a server to deploy in. However, people like me, who don't have a dedicated server can't even go near using it. So yeah, it's a no go&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/isso_ss.jpg" alt="" /&gt;&lt;/p&gt;

&lt;h4&gt;Pros&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Markdown support&lt;/li&gt;
&lt;li&gt;Small, lightweight&lt;/li&gt;
&lt;li&gt;Supports importing data from Disqus and Wordpress&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Cons&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Not serverless (Biggest disadvantage IMO)&lt;/li&gt;
&lt;li&gt;UI is not customizable and it's not that visually pleasing TBH&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a href="https://github.com/vkuznecovas/mouthful"&gt;Mouthful&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This one, written in Go and Preact, almost became my comment hosting service. I even wrote the frontend and configured it. I played around with it for a while but I have to say I did find the documentation a bit confusing.&lt;/p&gt;

&lt;p&gt;I thought it's a really good option, considering I was able to customize the UI (it matters to me, I'm not being childish!) and it had all the features that I wanted, especially the option to comment anonymously by default.&lt;/p&gt;

&lt;p&gt;However, turns out I can't use it if I don't have a dedicated server, I thought I would just deploy it on Heroku and then use DynamoDB but then I was really bored.&lt;/p&gt;

&lt;h4&gt;Pros&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Honeypot feature&lt;/li&gt;
&lt;li&gt;Supports various DB's like DynamoDB, sqlite, mysql and postgres&lt;/li&gt;
&lt;li&gt;UI is completely customizable&lt;/li&gt;
&lt;li&gt;Default UI is really not intuitive but the developer admits of that.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Cons&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Not serverless&lt;/li&gt;
&lt;li&gt;Comparatively larger with 14kb gzipped size (Isso is 12kb gzipped)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a href="https://github.com/cheng-kang/wildfire"&gt;Wildfire&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This one is like a fusion between Isso and Mouthful. It has a really beautiful UI and has a lot of feature. I seriously looked at their page once and really loved the look.&lt;/p&gt;

&lt;p&gt;However, what drove me away from using it is that it doesn't let users be &lt;em&gt;completely&lt;/em&gt; be anonymous?&lt;/p&gt;

&lt;p&gt;So, they do have an option to comment anonymously but we need to sign in first and then comment. I think they just didn't think about those people who comment anonymously just because they don't want to sign into some strangers site and/or are laxy of doing that.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/wildfire-anonymous-issue.jpg" alt="" /&gt;&lt;/p&gt;

&lt;h4&gt;Pros&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Markdown support (you guessed it right)&lt;/li&gt;
&lt;li&gt;Mention @username to reply&lt;/li&gt;
&lt;li&gt;UI is beautiful and really love those cute avatars for users&lt;/li&gt;
&lt;li&gt;Serverless&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Cons&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Anonymous is not literally anonymous (read above to understand what I mean)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a href="https://github.com/adtac/commento"&gt;Commento&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This is the one that I am using currently on my page. Read along to know why I chose this one and not the others.&lt;/p&gt;

&lt;p&gt;It literally has everthing that I wanted from a comment hosting service and it is also completely serverless. It has an option to deploy on your own but I went with the serverless one (well, duh).&lt;/p&gt;

&lt;p&gt;So, it is completely anonymous. It's UI is okayish but it's not that bad. Gives me real reddit vibes so I'm good. It supports login in using various social media like GitHub, Twitter... (just scroll down and you'll know).&lt;/p&gt;

&lt;h4&gt;Pros&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Completely serverless&lt;/li&gt;
&lt;li&gt;Completely anonymous comments&lt;/li&gt;
&lt;li&gt;Auto spam detection&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Cons&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;UI is okayish but gives reddit vibes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Those were the 4 free, open source comment hosting services that I think are the best out there, especially for developers like me.&lt;/p&gt;

&lt;p&gt;It's really simple now, which one to use. If a server is not an issue and you want some customization then go with Mouthful, else go for Isso.&lt;/p&gt;

&lt;p&gt;If you don't have access to a dedicated server and you don't care about introverts who want to keep their real identity hidden, then go with Wildfire, else Commento is the only good option.&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/4-lesser-known-free-comment-hosting-services-better-than-Disqus</guid>
      <category>comments</category>
      <category>hosting</category>
      <category>disqus</category>
      <category>hosting</category>
      <pubDate>Thu, 06 Feb 2020 05:30:00 +0000</pubDate>
    </item>
    <item>
      <title>Things to do before redesigning your personal page</title>
      <link>https://blog.deepjyoti30.dev/things-to-do-before-redesigning-your-personal-page</link>
      <description>&lt;p&gt;I have literally redesigned my personal page a hundred times. I made my page back in 2017. I always wanted to have a personal page but the lack of access to servers and a domain restricted that, until I found GitHub pages. Back then I didn't know what a responsive page was, I was just diving into the world of Web development. I did find about Bootstrap but I jumped the gun and started using it right away. After a few days and endless visits to &lt;em&gt;StackOverflow&lt;/em&gt; I was finally able to get my page on board.&lt;/p&gt;

&lt;p&gt;Though, it was just a basic page. I wanted to make it awesome but I didn't know what I was missing. It was anything but perfect. It has been 2 years since then and I can say that my page, even though not perfect, is good enough. It's &lt;em&gt;responsive&lt;/em&gt;, &lt;em&gt;looks good&lt;/em&gt; and it's &lt;em&gt;fast&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I believe any page should have these 3 things.&lt;/p&gt;

&lt;h2&gt;Responsive, Fast, Beautiful&lt;/h2&gt;

&lt;p&gt;There are many ways to do that. I learned it the hard way that it's not just my code, sometimes we need to use libraries to make our work easier and the page perform better.&lt;/p&gt;

&lt;h2&gt;Use a library to load images faster&lt;/h2&gt;

&lt;p&gt;I've always admired the way images load on Medium, and I really like it. So one day, I just wondered how I could do something like that in my blogs and as it turns out there are libraries for that.&lt;/p&gt;

&lt;p&gt;The one that can get the medium effect, (which I use BTW) is called &lt;a href="https://github.com/craigbuckler/progressive-image.js"&gt;progressive-image.js&lt;/a&gt;. What it does is loads a low quality version of the actual image when the page is loaded and later, as you scroll through the contents, it loads the rest of the high quality images on the background. Isn't that nice? Go give it a shot, it's super easy to use.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://jmperezperez.com/medium-image-progressive-loading-placeholder/"&gt;José M. Pérez's Blog Post&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Use illustrations instead of images&lt;/h2&gt;

&lt;p&gt;Don't know what I'm talking about? Have you seen those pages that have those really cute looking human figures that indirectly convey the message. HINT: Look below.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/thinking.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Still thinking? These illustrations can be got from sites like &lt;a href="https://undraw.co"&gt;unDraw&lt;/a&gt; or &lt;a href="https://freepik.com"&gt;freepik&lt;/a&gt;. The ones available at unDraw are completely open source and they can even be downloaded with the color you like. freepik does give free images but with the condition that the author will be given credit wherever the image is used.&lt;/p&gt;

&lt;h2&gt;Learn to use Bootstrap&lt;/h2&gt;

&lt;p&gt;If you don't already know this, Bootstrap has a really good &lt;a href="https://getbootstrap.com/docs/4.1/getting-started/introduction/"&gt;documentation&lt;/a&gt;. I was damned when I found out the amount of flexibility it gives. I am pretty sure that after redesigning my page so many times, I can safely say that the amount of css I wrote in the beginning has reduced by about 70% after learning about the different features that Bootstrap has.&lt;/p&gt;

&lt;p&gt;I'm not saying that you need to read the whole docs but instead atleast the most used ones. Or we can always keep searching as we keep building the page, that's the approach I take nowadays.&lt;/p&gt;

&lt;p&gt;Anyways, if the solution is not available in the docs, StackOverflow always has it.&lt;/p&gt;

&lt;h2&gt;Use custom fonts&lt;/h2&gt;

&lt;p&gt;Fonts are an important part of the design. What better place to get fonts then Google. Google has a whole &lt;a href="https://fonts.google.com/"&gt;site&lt;/a&gt; dedicated to fonts that can be used for free.&lt;/p&gt;

&lt;p&gt;I'm currently using &lt;a href="https://fonts.google.com/specimen/Roboto+Condensed/"&gt;Roboto Condensed&lt;/a&gt; for the title of the blogs in my page. Experiment using different fonts on your page and keep trying new designs, you'll find the right one. I started with some really weird fonts in the beginning and as I kept trying new ones, I kept changing them.&lt;/p&gt;

&lt;h2&gt;Start using SASS&lt;/h2&gt;

&lt;p&gt;It's not hard. It's really simple and it's not necessary to know it all to actually use it. Use for the small things and gradually learn to do the different things. Anyways, if you have a programming background, which most people reading this post probably have, it's really feels awesome to use it.&lt;/p&gt;

&lt;p&gt;I always thought it's a lot of work to use SASS and I can say I've never been so wrong in my life. All we need is a &lt;em&gt;converter&lt;/em&gt; to convert the sass files to css. I use &lt;a href="https://github.com/sass/sassc"&gt;SassC&lt;/a&gt; which I preferred to use because it's written in C and being a C developer I always have this feeling in the back of my head that C is blazing fast always.&lt;/p&gt;

&lt;h2&gt;Simple is Beautiful&lt;/h2&gt;

&lt;p&gt;I used to think making my page feature packed will make it awesome. That's not true all the time. Yes, having features, a lot of them is a happy addon but making it messy with features is not a good approach to designing your page.&lt;/p&gt;

&lt;p&gt;Try to keep it simple, use all the above points provided, keep it simple. Make awesome, but small, things. If you want to show people how good a developer you are, design the page such that, it's simple and yet has a lot of features. Features that users will find out as they scroll through the page.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Lastly, it's important to understand that, It is NOT necessary to show all the skills you have. While designing the page, keep in mind the users perspective. You don't wanna brag about your skills and at the same time you wanna make sure that they know you're good.&lt;/p&gt;

&lt;p&gt;This last part is the one that people don't understand, mostly newbies. Finding a way to beautifully present yourself such that people love it and don't think you're too much at the same time is a skill you'll develop with time, with a lot of &lt;em&gt;redesigns&lt;/em&gt; of your page.&lt;/p&gt;

&lt;p&gt;Have a Happy New Year guys and try to implement these few points while designing your page and you'll see how you feel good about your page. Good Luck 😉&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/things-to-do-before-redesigning-your-personal-page</guid>
      <category>personal</category>
      <category>page</category>
      <category>redesign</category>
      <category>github</category>
      <pubDate>Tue, 31 Dec 2019 05:30:00 +0000</pubDate>
    </item>
    <item>
      <title>Write a responsive progressbar for the commandline using Python</title>
      <link>https://blog.deepjyoti30.dev/responsive-progressbar-for-the-commandline</link>
      <description>&lt;blockquote&gt;
  &lt;p&gt;“Everyday life is like programming, I guess. If you love something you can put beauty into it.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have all seen progressbars everywhere. We see them on websites all the time and those of us who use a Linux distro, looking at a progressbar is like one of our day to day tasks. Especially when you use the terminal like you can nuke a country from it. Progressbars are used by a lot of commandline software's we use. Python's pip use them, npm has an awesome progressbar along with a spinner and our holy pacman, obviously has one too.&lt;/p&gt;

&lt;p&gt;However, progressbars are sometimes messy. If you've used pip more than just a couple of times, it is unavoidable to notice that the progressbar's size is predefined. What that means is, the bar doesn't resize depending on the width of the terminal, messing up the output a lot of times.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/bar.jpg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Though, pip's bar might not be responsive, pacman has a really neat bar that hardly screw's up. The length of the bar changes according to the width of the terminal.&lt;/p&gt;

&lt;p&gt;So how can we make a responsive, awesome progressbar ourselves? Read ahead and you'll know.&lt;/p&gt;

&lt;h2&gt;Things to know beforehand.&lt;/h2&gt;

&lt;p&gt;So we need to know first how a bar is actually printed. As we all know, printing a line in the terminal is not big deal, especially with languages like Python. When we print a line, it's printed and goes to the next line (in python), but we want to progressively update the same line if we want to print the bar.&lt;/p&gt;

&lt;p&gt;In this case, we can use \r. It is the carriage return escape sequence which makes sure that we are able to wipe the current line. So what we will do is keep wiping the line and printing every after a while (this just means we can add a gap between printing by using a time library, makes things a bit more efficient). So that we can print a bar pretty easily.&lt;/p&gt;

&lt;p&gt;We are going to use the sys module to do the above mentioned things. So we will keep repeating 3 lines in order to make sure our bar keeps getting updated.&lt;/p&gt;

&lt;p&gt;We need to put it in a loop to make sure that the bar is printed to 100%, after it gets to 100% we can simply break the loop.&lt;/p&gt;

&lt;h2&gt;Making the bar.&lt;/h2&gt;

&lt;p&gt;Now that we know how to print the bar, let's make the bar. We can make a simple repeating the below steps on loop.&lt;/p&gt;

&lt;p&gt;So the things we will have to do are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Determine the percentage done and percentage left&lt;/li&gt;
&lt;li&gt;Print # number of done, i:e multiply and print (space) number of left.&lt;/li&gt;
&lt;li&gt;Sleep for a while, check the progress and print again.&lt;/li&gt;
&lt;li&gt;Keep repeating untill we reach 100%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above code will print a bar of of 20 # after it's done.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/simple_bar.gif" alt="" /&gt;&lt;/p&gt;

&lt;h2&gt;Making it responsive.&lt;/h2&gt;

&lt;p&gt;Now that we have our bar in place, we want to make sure that it respects the width of the terminal window and changes it's length according to it. We can get the width using the os module's popen function.&lt;/p&gt;

&lt;p&gt;After we get the width, we will use it every time before printing the bar. This way, even if we resize the window while the bar is increasing, it will resize itself automatically.&lt;/p&gt;

&lt;p&gt;In the above code, we get the width of the terminal, use a loop to decrease the length of the bar from 40 to 20 to 10 and so on. The length is decreased by half each time.&lt;/p&gt;

&lt;p&gt;After that we use the length to determine how much of the bar we need to show as done by using the formula percent / 100 / bar_len. Here bar_len plays an important role since the amount of bar to be filled is directly related to the length of the bar.&lt;/p&gt;

&lt;p&gt;So, if our bar is of 40 length, then in each percentage increase, the bar will be calculated using percent / (100/ 40) = percent / 2.5.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/responsive_bar.gif" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So that is how we can make a responsive progressbar for the commandline. In case you want to dive deeper and make your bar better, check my GitHub repo of a downloader where I'm using the same concept to create a progressbar. You can make it so much better, like adding colors, adding other stats regarding the progress like the speed, percentage etc.&lt;/p&gt;

&lt;p&gt;Check the repo &lt;a href="https://github.com/deepjyoti30/downloader-cli"&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/responsive-progressbar-for-the-commandline</guid>
      <category>python</category>
      <category>cli</category>
      <category>commandline</category>
      <category>responsive</category>
      <pubDate>Sun, 17 Nov 2019 05:30:00 +0000</pubDate>
    </item>
    <item>
      <title>How I wrote a Telegram bot for Bitbucket using Heroku and Python</title>
      <link>https://blog.deepjyoti30.dev/how-i-wrote-a-telegram-bot-for-bitbucket</link>
      <description>&lt;p&gt;So recently I started working on a group project with some of my friends. We did not want to make it opensource but I wanted to make sure we use a version controlling system but GitHub didn't allow having private organization repos without a cost, so we ended up with BitBucket.&lt;/p&gt;

&lt;p&gt;To be honest, BitBucket provides all the features that we get from GitHub except that we don't get a contribution graph. Anyway, so we made a Telegram group to talk about the project whenever necessary and it turned out that after either one of us made a new push, we had to go text in the telegram app to make sure the others knew about it. So, I thought, why not have a bot instead which would send a message whenever someone pushes a new commit (anyway Telegram is pretty famous for their bot API's).&lt;/p&gt;

&lt;p&gt;So I started reading posts on how to do that. So I read &lt;a href="https://www.codementor.io/djangostars/create-deploy-telegram-bot-python-7jggn472x"&gt;this&lt;/a&gt; article. After reading it, I was ready to build my own bot. So what I thought was I can use BitBuckets API.&lt;/p&gt;

&lt;h2&gt;Things to set up&lt;/h2&gt;

&lt;p&gt;So we need to set up some things before we go on with writing our app.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set up your bot. Read &lt;a href="https://www.siteguarding.com/en/how-to-get-telegram-bot-api-token"&gt;this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Set up a &lt;a href="https://signup.heroku.com/"&gt;Heroku&lt;/a&gt; account, we need that because that's where we are going to deploy the app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My first attempt at the bot didn't work and it was, TBH wasn't the right way to do it. The second attempt is the proper way to do it.&lt;/p&gt;

&lt;h3&gt;First Attempt&lt;/h3&gt;

&lt;p&gt;I wrote a python app that would be on an infinite loop and keep checking the current commits, in case a new commit arrives, it will use Telegram's API to send a message. This way was pretty resource hungry and Heroku always used to shut my app because it didn't get any requests at all. It obviously didn't work and so I had to find another way to make my bot work.&lt;/p&gt;

&lt;h3&gt;Second Attempt&lt;/h3&gt;

&lt;p&gt;Let's write our python app first. We will be using the token of the bot to send the message.&lt;/p&gt;

&lt;p&gt;Replace the bot token with the token that you got earlier. We will be using this function to send the message. Next, we need to write the code for our server that is going to listen to when a POST request is sent by Bitbucket.&lt;/p&gt;

&lt;p&gt;Before we do that, we need to write a function to build a message from the data that we have just got.&lt;/p&gt;

&lt;p&gt;After we are done writing this functions, the next thing we do is write our &lt;code&gt;flask&lt;/code&gt; app. We need to make sure that it is listening for a POST request and when we get one, we will extract the data, build a message about it and then send it.&lt;/p&gt;

&lt;p&gt;Replace the &lt;code&gt;chat_id&lt;/code&gt; with the ID of the bot.&lt;/p&gt;

&lt;p&gt;And our app is done. We can now push the app to our heroku app. We need to make a new app on heroku and then push it, directly from the commandline using &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Set Up BitBucket webhook.&lt;/h3&gt;

&lt;p&gt;Now we need to enable the webhook. This webhooks act according to the trigger events that we select while setting up the hooks. Read &lt;a href="https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/hooks#post"&gt;this&lt;/a&gt; article.&lt;/p&gt;

&lt;p&gt;So we will enable them for push events. Everytime someone makes a push request to the repo, we will get a POST request to our heroku app. We can enable the webhook by making a POST request to their API. Replace the &lt;code&gt;url&lt;/code&gt; with the name of the app. For eg: &lt;code&gt;yourapp.heroku.com/webhook&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That is it. We wrote a simple bot for BitBucket. Sit back and make a push to the repo that you enabled the webhook in. You will get a message on your Telegram.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/telegram_ss.png" alt="" /&gt;&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/how-i-wrote-a-telegram-bot-for-bitbucket</guid>
      <category>telegram</category>
      <category>bot</category>
      <category>bitbucket</category>
      <category>open</category>
      <pubDate>Thu, 24 Oct 2019 05:30:00 +0000</pubDate>
    </item>
    <item>
      <title>Have your own page for free</title>
      <link>https://blog.deepjyoti30.dev/have-a-personal-page-for-free</link>
      <description>&lt;p&gt;I have my whole personal page on Github and it's been here since last year. Yes, I know a lot of people have their page on GitHub but what &lt;em&gt;a lot&lt;/em&gt; of people don't do is use Heroku to make it dynamic which I'm going to tell you how to do.&lt;/p&gt;

&lt;p&gt;But before that, just in case you don't know how to setup a page on GitHub for free or don't have any experience with GitHub at all then read along this part of the article, else just move on to the Heroku part. I'm not going to talk about setting up GitHub pages because honestly, a lot of people have done that and even Github has their own page to help you set it up. Check it &lt;a href="https://pages.github.com/"&gt;here&lt;/a&gt;. So GitHub, has two options to set up the page.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can setup by using the themes provided by GitHub (&lt;em&gt;not recommended&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;You can make your own page using html, css, jquery etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don't think it is possible to make GET, POST requests by using the Jekyll themes, so the obvious option to go with is making your own page by writing an index.html of your own. After that you can make changes to it all you want and the GET and POST request to the servers can be made by using jquery or JS.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Why use Heroku?&lt;/h2&gt;

&lt;p&gt;We need a server to make our page dynamic. To store data that would be altered while the page is being used by different users and while searching for an option I found out about Heroku. Go set up your own accout &lt;a href="https://signup.heroku.com/"&gt;there&lt;/a&gt; because we're sure going to need one.&lt;/p&gt;

&lt;h2&gt;Writing our API&lt;/h2&gt;

&lt;p&gt;I referred to &lt;a href="https://www.codementor.io/sagaragarwal94/building-a-basic-restful-api-in-python-58k02xsiq"&gt;this&lt;/a&gt; article to build a restful API using Python. We can write it using any language we want.&lt;/p&gt;

&lt;p&gt;I used Flask to build the API. I wanted to make a clap function similar to one that we see in Medium articles. So the first thing I did was write a simple API that takes an ID to keep the number of claps of different posts. It is a simple API. Whenever we make a GET request it would check the ID and return the number of claps. If a POST request is made to that endpoint it increases the number of clap counts by 1 for the passed ID. I did add the basic checks, like if an ID is invalid, if a new ID is sent then add the ID to the file of claps. Yes, I said &lt;em&gt;file&lt;/em&gt; of claps. Well I thought I would use a dbms like sqlie but I rather went with saving the claps in a json file.&lt;/p&gt;

&lt;h2&gt;The catch?&lt;/h2&gt;

&lt;p&gt;Before you think of pushing this app, we need to add a simple thing to our Python file. The file that we will be using as the server. We need to enable &lt;strong&gt;Cross Origin Resource Sharing&lt;/strong&gt; (CORS). What it is? It basically stops anyone from making a request to your server, so when you try to make a request from the page that is stored on GitHub pages, it will stop you from doing so. This is because the server we are making the request to and the server where the pages that are making the request are different. Thus, we need to enable it in our Flask app. Just add the following lines of code&lt;/p&gt;

&lt;p&gt;After the testing is done, we can push the app to Heroku. All we have to do is make a new app on Heroku and then push the app. It's similar to using git. We can use Heroku from either the commandline or from their page. I prefer to use the cli app since its pretty simple and also I'm a sucker for cli apps. Get the Heroku CLI app from the package manager you use, or check their guide to download and install it &lt;a href="https://devcenter.heroku.com/articles/heroku-cli"&gt;here&lt;/a&gt;. Make sure you are logged in to your heroku account first, use &lt;code&gt;heroku login&lt;/code&gt; to do that. After that's done, use the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;heroku create appname
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Replace appname with the name of the app&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can continue with the usual loop of &lt;code&gt;add, commit and push&lt;/code&gt; after this, as long as we want. Make sure to use &lt;code&gt;git push heroku master&lt;/code&gt; to push to the master branch of the current app.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://media.giphy.com/media/26BGMfrupkRx68NwY/giphy.gif" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;With every build, Heroku will build the app and then deploy it in a new dyno. Read more about Heroku dynos &lt;a href="https://www.heroku.com/dynos"&gt;here&lt;/a&gt;. Heroku follows a ephemeral filesystem. Each dyno has its own ephemeral filesystem. Read &lt;a href="https://devcenter.heroku.com/articles/getting-started-with-python?singlepage=true"&gt;this&lt;/a&gt; article to know more about deploying your app with python.&lt;/p&gt;

&lt;h2&gt;Things to look out for&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Heroku has a sleep policy that every dyno needs to get 6 hours of sleep every day.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This simply means that the dyno that your app is deployed on will go to sleep if it is idle for an hour. After it gets a new request, it will come back to working again. &lt;strong&gt;However&lt;/strong&gt;, when a dyno &lt;em&gt;wakes&lt;/em&gt; up, there's more to it than what it sounds like. With every wakeup, your app is deployed in a new dyno, this is why it's said to have an &lt;em&gt;ephemeral filesystem&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Due to this, if you make request to the endpoint after like 1 hour of the last request, it takes a bit of time to return the response. That happens clearly because the dyno restarts and then executes the app and returns accordingly.&lt;/p&gt;

&lt;p&gt;You can always make other API's. I used the same idea to deploy another app which make sure's I get an email when someone clicks on that send button on the form in the homepage. I used Sendgrid to send the email and basic python to make sure nobody is able to spam.&lt;/p&gt;

&lt;p&gt;That's it for this article, hit that clap button if you want to send a POST request to my dyno or you could always do that to show me some love.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I will be writing another post to show how to use static files on Heroku apps. Keep a lookout for that.&lt;/em&gt;&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/have-a-personal-page-for-free</guid>
      <category>github</category>
      <category>static</category>
      <category>page</category>
      <category>personal</category>
      <pubDate>Wed, 16 Oct 2019 05:30:00 +0000</pubDate>
    </item>
    <item>
      <title>About me</title>
      <link>https://blog.deepjyoti30.dev/about-me</link>
      <description>&lt;p&gt;Hi, I am Deepjyoti. I am a developer. My interest in gadgets started when I got my first phone. Ofcourse it was an Android phone and it had a real slow processor.&lt;/p&gt;

&lt;p&gt;That forced me to jump into the world of custom ROM's. Eventually I came across developers who were respected a lot for building these ROM's. I then felt this urge that even I want something like that.&lt;/p&gt;

&lt;p&gt;Fast forward 2 years, I opted for Computer Science in High School. Thats where i started learing C++. After a year of learning C++, I wanted to make things that people would use, that would make their lives simpler. So I learnt Python.&lt;/p&gt;

&lt;p&gt;Since then I have never looked back. Off late I have also developed an interest in customizing my laptop, software wise. This fascination started when I started using Ubuntu and came across a subreddit called &lt;a href="https://reddit.com/r/unixporn"&gt;unixporn&lt;/a&gt;. I now take great joy in customizing my setup. Do check it out &lt;a href="https://github.com/deepjyoti30/dotfiles"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/deepjyoti30/dots"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/ytmdl.png" alt="ytmdl" /&gt;&lt;/p&gt;

&lt;p&gt;I use a Dell laptop, the one in the cover of this article? Yeah, that's right. I have Manjaro i3 installed on it. I love using cli based applications. I try to do almost everything from the commandline. Why almost? Beacuse some things are, even though possible, just not possible (fun is the word) from the commandline. I mean, I just don't want to browse from the cli. I like appreciating &lt;em&gt;magical things&lt;/em&gt; that frontend developers do with their pages and thats just not possible from the cli.&lt;/p&gt;

&lt;p&gt;I also like listening to music, I mean I call it my hobby sometimes (who doesn't?). I go cli completely on music though. Streaming it? I use playx (check homepage for links). Local music? MPD + ncmpcpp it is! Off late, I have taken an interest in dev-ops. I mean I'm fascinated by the ammount of automation I would have to do to make peoples lives easier. I think its really cool how dev-ops works.&lt;/p&gt;

&lt;p&gt;Currently I'm a sophomore in college and I'm studying Computer Science (as if it was that hard to guess). You can always check my linkedIn for other details. So basically, I'm a guy with a lot of interest in technology. BTW, did I tell you that now I use a fairly better phone than the one that I mentioned earlier, yes, my first phone. So the current one is good, it has a pop-up camera and all and I still install custom ROMs on it. I just can't get enough of this freedom I get by using custom ROMs and wild card to all new Android updates. Also, I'm a huge Android fan.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I keep updating this article with my latest interests and other stuff though, so you can always check it once in a while. ;-p&lt;/em&gt;&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/about-me</guid>
      <category>about</category>
      <category>me</category>
      <category>personal</category>
      <category>deepjyoti30</category>
      <pubDate>Sat, 12 Oct 2019 05:30:00 +0000</pubDate>
    </item>
    <item>
      <title>Github and people who steal</title>
      <link>https://blog.deepjyoti30.dev/github-and-people-who-steal</link>
      <description>&lt;p&gt;I have been using Github for a while now. If I have a project in mind, the first thing I do is make a new repo on github and then start with the project. It was around May (or June maybe) of 2018 when I had posted on Reddit about my project &lt;a href="https://github.com/deepjyoti30/ytmdl"&gt;ytmdl&lt;/a&gt; to check peoples response to it. That was when I came across &lt;a href="https://github.com/NISH1001/playx"&gt;playx&lt;/a&gt;. So &lt;a href="https://github.com/NISH1001"&gt;Nishan&lt;/a&gt; mentioned his project on the comments suggesting he had been working on something similar to my project. As I was, I opened the page and checked it. Turns out there were a lot of TODO's listed. I was free then, so I forked it and started working.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/reddit-comment.jpg" alt="Nishan's comment on my ytmdl post." /&gt; Nishan's comment on my post&lt;/p&gt;

&lt;p&gt;What started as a fun project quickly turned into an utility that I got adddicted to working on. I still remember making pull requests before sleeping every night at around 3 A.M. and every morning the first thing I'd check for is if the PR is approved or if Nishan has made any comments. I can say I enjoyed working on the project and a lot of it was because of Github. The simplicity of making PR's and getting them merged in the original code.&lt;/p&gt;

&lt;p&gt;However, recently something happened that shook us both. We couldn't decide if we should laugh or get angry. Somebody stole our project. It was not a fork of the project, instead this person made a new repository and named it &lt;em&gt;layx&lt;/em&gt; which is &lt;em&gt;playx&lt;/em&gt; without a p. And the code, it was &lt;strong&gt;our&lt;/strong&gt; code. All I could think of was the late night PR's that I had made and how I have spent so much time working on it and it was all not mine anymore. On top of that, he didn't even care to change the README (that was offensive, he didn't care to fix the bugs.). The logo, it was the same logo that one developer has contributed to our project, just without a p. He even shared the project on Reddit and thats where Nishan came across it.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/layx.jpg" alt="" /&gt; layx posted on reddit&lt;/p&gt;

&lt;p&gt;Yes I know we had a license but we felt helpless. Nishan opened a pull request asking this guy to take the repository down. He replied by closing it and saying it'll work differently to playx because it will take data from spotify (even I don't know why he thinks copying our code, making changes and branding it his, made sense). I asked Nishan if he has taken any action. He said he has contacted github but they said they can't help. He even tweeted. Later I opened a PR on this &lt;em&gt;layx&lt;/em&gt; repo and asked him to take it down or we would take legal action.&lt;/p&gt;

&lt;p&gt;By this time, Nishan had already asked for a DMCA takedown of the project and the next day I got a mail from Nishan telling me that the guy deleted all our code from the repo and added java code there. Also, github had responded to tweets by Nishan by this time and later he had to tell them that it was settled.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/deepjyoti30/blog-static-content/master/content/dec-PR.png" alt="" /&gt; Pull request of Dec 31&lt;/p&gt;

&lt;p&gt;Now here's what makes me scared. Even though I have licensed my projects, what if someday, some random guy copies all my code and brands it his. I know I have legal solutions to problems like this but what I don't understand is do I deserve this, do my time deserve being wasted like this? Just because some guy thought it would be funny or he didn't know the rules. What's even worse is I wouldn't even know if he's using my project would he not feel like sharing it on places like Reddit.&lt;/p&gt;

&lt;p&gt;As I am writing this post, I can only imagine how many other people are working hard, missing their sleep just to make that last PR and how many people are cloning someone's project to make it their own.&lt;/p&gt;

&lt;p&gt;Github is a big company and I'm really positive it has the power to take actions on things like this. I know it'd be a big step but I really think, its time Github starts taking things like this seriously or it's going to directly effect the opensource community that we take pride working in.&lt;/p&gt;
</description>
      <guid isPermaLink="false">https://blog.deepjyoti30.dev/github-and-people-who-steal</guid>
      <category>github</category>
      <category>steal</category>
      <category>copyright</category>
      <category>playx</category>
      <pubDate>Sat, 10 Aug 2019 05:30:00 +0000</pubDate>
    </item>
  </channel>
</rss>
